{
    "status": "ok",
    "feed": {
        "url": "https://medium.com/feed/flutter",
        "title": "Flutter - Medium",
        "link": "https://medium.com/flutter?source=rss----4da7dfd21a33---4",
        "author": "",
        "description": "Flutter is Google's mobile UI framework for crafting high-quality native interfaces on iOS and Android in record time. Flutter works with existing code, is used by developers and organizations around the world, and is free and open source. Learn more at https://flutter.dev - Medium",
        "image": "https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png"
    },
    "items": [
        {
            "title": "When should I useAnimatedBuilder or AnimatedWidget?",
            "pubDate": "2020-01-19 20:57:30",
            "link": "https://medium.com/flutter/when-should-i-useanimatedbuilder-or-animatedwidget-57ecae0959e8?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/57ecae0959e8",
            "author": "Emily Fortuna",
            "thumbnail": "https://cdn-images-1.medium.com/max/840/1*nXKMdHu2YNqZmrGClWlDZw.png",
            "description": "\n<p>We know you have many choices when you fly, I mean animate, in Flutter, so thank you for choosing AnimatedBuilder and AnimatedWidget. Wait, what? No! Flutter has many different animation widgets, but unlike commercial airlines, each type of widget is right for a different type of job. Sure, you can accomplish the same animation in a couple of different ways, but using the right animation widget for the job will make your life much easier.</p>\n<p>This article covers why you might want to use AnimatedBuilder or AnimatedWidget versus other animation widgets, and how to use them. Suppose you want to add an animation to your app. This article is <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">part</a> <a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">of</a> <a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">a</a> series, walking through why you might want to use each type of animation widget. The particular animation you want to do repeats a couple of times or needs to be able to pause and resume in response to something, like a finger tap. Because your animation needs to repeat, or stop and start, you’ll need to use an <em>explicit </em>animation.</p>\n<p>As a reminder, we have two broad categories of animations in Flutter: explicit and implicit. For explicit animations, you need an animation controller. For implicit animations, you don’t. We introduced animation controllers in the previous article about built-in explicit animations. If you’d like to learn more about those, please check that out first.</p>\n<p>So, if you’ve determined that you need an explicit animation, there are a whole host of explicit animation classes for you to choose from. Those are the classes generally named FooTransition, where <em>Foo</em> is the name of the property you are trying to animate. I recommend seeing if you can use one of those widgets to accomplish your needs first, <em>before</em> diving into the deep world of AnimatedWidget and AnimatedBuilder. There’s an amazing selection of widgets for pretty much anything you can think of — rotation, position, alignment, fading, text style, and many more. Plus, you can compose these widgets, so that you can rotate <em>and</em> fade. But, if none of those built-in widgets can do what you’re looking for, it’s time to build your own using AnimatedWidget or AnimatedBuilder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/840/1*nXKMdHu2YNqZmrGClWlDZw.png\"><figcaption>A flow chart for understanding what animation to use in any scenario. This article focuses on the two bottom blue end-states, AnimatedBuilder and AnimatedWidget.</figcaption></figure><h3>Specific Example</h3>\n<p>To make this more concrete, let’s walk through a specific scenario: I want to write an app with an alien spaceship and have a spaceship beam animation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/1*BdRzZMnfFtwe0Wn1dxWp4g.gif\"><figcaption>Maybe something exactly like this.</figcaption></figure><p>I drew a spaceship beam with a gradient that fades from yellow to transparent, beginning the fade at the very center of the gradient. Then, I created the “beam” shape from that gradient with a path clipper.</p>\n<a href=\"https://medium.com/media/9d8ce77b4a61b1cc662bd2021cd06571/href\">https://medium.com/media/9d8ce77b4a61b1cc662bd2021cd06571/href</a><p>I want to create a “beam down” animation, starting from the center of that gradient, and I want to make it repeat. That means I’ll need to create an explicit animation. Unfortunately there’s no built-in explicit animation to animate funnel-shaped gradients, but you know what we do have… AnimatedWidget and AnimatedBuilder to do the trick!</p>\n<h3>AnimatedBuilder</h3>\n<p>To make the beam animate, I am going to wrap this gradient code in an AnimatedBuilder widget. The gradient code goes in the builder function, which gets called when the AnimatedBuilder builds.</p>\n<p>Next I need to add a controller to drive this animation. The controller provides the values that AnimatedBuilder uses to draw new versions of the animation frame by frame. As you saw in the previous article, I mix in the SingleTickerProviderStateMixin class and instantiate the controller in the initState function so that it only gets created once. I create the controller in initState, rather than the build method, because I don’t want to create this controller multiple times — I want it to provide new values to animate with for each frame! Because I created a new object in initState, I add a dispose method and tell Flutter that it can get rid of that controller when the parent widget is no longer on the screen.</p>\n<p>Then, I pass that controller to the AnimatedBuilder, and my animation runs as expected!</p>\n<a href=\"https://medium.com/media/85187c006d79a4d6eca10e01c79bbc2b/href\">https://medium.com/media/85187c006d79a4d6eca10e01c79bbc2b/href</a><p>You may recall in the <a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">TweenAnimationBuilder article</a> that we used the child parameter as a performance optimization, and we can do that with AnimatedBuilder too. Basically, if we have an object that never changes over the course of the animation, we can build it ahead of time, and just pass it to AnimatedBuilder.</p>\n<p>In this specific case, a <em>better</em> way to accomplish the same thing is to give BeamClipper a const constructor and just make it const. It’s less code, and the object is created at compile time, making things even faster. Sometimes, though, you’ll be coding something that doesn’t have a const constructor, and that’s a good case for when to make use of that optional child parameter.</p>\n<h3>AnimatedWidget</h3>\n<p>So, we have our animation, but the build method that contains the AnimatedBuilder code is a little large. If your build method is starting to get hard to read, it’s time to refactor your code!</p>\n<p>You could pull your AnimatedBuilder code out into a separate widget, but then you just have a build method inside a build method, which is a little silly. Instead, you can accomplish the same animation by creating a new widget that extends AnimatedWidget. I’ll name my widget BeamTransition to be consistent with the <em>FooTransition</em> naming convention for explicit animations. I pass in the animation controller to BeamTransition and reuse the body of the AnimatedBuilder’s builder function.</p>\n<a href=\"https://medium.com/media/2706bb6ba3d6d4837936792805c00e5d/href\">https://medium.com/media/2706bb6ba3d6d4837936792805c00e5d/href</a><p>Just like AnimatedBuilder, if appropriate, I can add a child parameter to my widget as a performance optimization so that it builds ahead of time, instead of every time I animate. Just a reminder though, in this example, making my BeamClipper take a const constructor is the best way to go.</p>\n<h3>So really, which one should I to use?</h3>\n<p>We just saw how AnimatedBuilder and AnimatedWidget can both be used to accomplish the same type of explicit animations when you can’t find a built-in explicit animation to do what you want. So, which one should you use? It’s really a matter of taste. Generally speaking, I recommend making individual widgets, each with a separate job — which in this case is animation.</p>\n<p>That’s a vote in favor of using AnimatedWidget whenever possible. However, if your parent widget that creates the animation controller is pretty simple, maybe making a separate standalone widget just for your animation is too much extra code. In that case, AnimatedBuilder is all that you need.</p>\n<p>This is an article version of the video below. If you prefer videos, click below:</p>\n<a href=\"https://medium.com/media/c67252c760e8dbd66c0f6df2aa09880b/href\">https://medium.com/media/c67252c760e8dbd66c0f6df2aa09880b/href</a><p>This article is part of a series! Check out the other articles here:</p>\n<ul>\n<li><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter Animation Basics with Implicit Animations</a></li>\n<li><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter … with TweenAnimationBuilder</a></li>\n<li><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional Animations with Built-in Explicit Animations</a></li>\n<li>When Should I use AnimatedBuilder or AnimatedWidget (this article!)</li>\n<li>Bare Metal Explicit Animations (coming soon!)</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=57ecae0959e8\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/when-should-i-useanimatedbuilder-or-animatedwidget-57ecae0959e8\">When should I useAnimatedBuilder or AnimatedWidget?</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>We know you have many choices when you fly, I mean animate, in Flutter, so thank you for choosing AnimatedBuilder and AnimatedWidget. Wait, what? No! Flutter has many different animation widgets, but unlike commercial airlines, each type of widget is right for a different type of job. Sure, you can accomplish the same animation in a couple of different ways, but using the right animation widget for the job will make your life much easier.</p>\n<p>This article covers why you might want to use AnimatedBuilder or AnimatedWidget versus other animation widgets, and how to use them. Suppose you want to add an animation to your app. This article is <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">part</a> <a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">of</a> <a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">a</a> series, walking through why you might want to use each type of animation widget. The particular animation you want to do repeats a couple of times or needs to be able to pause and resume in response to something, like a finger tap. Because your animation needs to repeat, or stop and start, you’ll need to use an <em>explicit </em>animation.</p>\n<p>As a reminder, we have two broad categories of animations in Flutter: explicit and implicit. For explicit animations, you need an animation controller. For implicit animations, you don’t. We introduced animation controllers in the previous article about built-in explicit animations. If you’d like to learn more about those, please check that out first.</p>\n<p>So, if you’ve determined that you need an explicit animation, there are a whole host of explicit animation classes for you to choose from. Those are the classes generally named FooTransition, where <em>Foo</em> is the name of the property you are trying to animate. I recommend seeing if you can use one of those widgets to accomplish your needs first, <em>before</em> diving into the deep world of AnimatedWidget and AnimatedBuilder. There’s an amazing selection of widgets for pretty much anything you can think of — rotation, position, alignment, fading, text style, and many more. Plus, you can compose these widgets, so that you can rotate <em>and</em> fade. But, if none of those built-in widgets can do what you’re looking for, it’s time to build your own using AnimatedWidget or AnimatedBuilder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/840/1*nXKMdHu2YNqZmrGClWlDZw.png\"><figcaption>A flow chart for understanding what animation to use in any scenario. This article focuses on the two bottom blue end-states, AnimatedBuilder and AnimatedWidget.</figcaption></figure><h3>Specific Example</h3>\n<p>To make this more concrete, let’s walk through a specific scenario: I want to write an app with an alien spaceship and have a spaceship beam animation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/1*BdRzZMnfFtwe0Wn1dxWp4g.gif\"><figcaption>Maybe something exactly like this.</figcaption></figure><p>I drew a spaceship beam with a gradient that fades from yellow to transparent, beginning the fade at the very center of the gradient. Then, I created the “beam” shape from that gradient with a path clipper.</p>\n<a href=\"https://medium.com/media/9d8ce77b4a61b1cc662bd2021cd06571/href\">https://medium.com/media/9d8ce77b4a61b1cc662bd2021cd06571/href</a><p>I want to create a “beam down” animation, starting from the center of that gradient, and I want to make it repeat. That means I’ll need to create an explicit animation. Unfortunately there’s no built-in explicit animation to animate funnel-shaped gradients, but you know what we do have… AnimatedWidget and AnimatedBuilder to do the trick!</p>\n<h3>AnimatedBuilder</h3>\n<p>To make the beam animate, I am going to wrap this gradient code in an AnimatedBuilder widget. The gradient code goes in the builder function, which gets called when the AnimatedBuilder builds.</p>\n<p>Next I need to add a controller to drive this animation. The controller provides the values that AnimatedBuilder uses to draw new versions of the animation frame by frame. As you saw in the previous article, I mix in the SingleTickerProviderStateMixin class and instantiate the controller in the initState function so that it only gets created once. I create the controller in initState, rather than the build method, because I don’t want to create this controller multiple times — I want it to provide new values to animate with for each frame! Because I created a new object in initState, I add a dispose method and tell Flutter that it can get rid of that controller when the parent widget is no longer on the screen.</p>\n<p>Then, I pass that controller to the AnimatedBuilder, and my animation runs as expected!</p>\n<a href=\"https://medium.com/media/85187c006d79a4d6eca10e01c79bbc2b/href\">https://medium.com/media/85187c006d79a4d6eca10e01c79bbc2b/href</a><p>You may recall in the <a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">TweenAnimationBuilder article</a> that we used the child parameter as a performance optimization, and we can do that with AnimatedBuilder too. Basically, if we have an object that never changes over the course of the animation, we can build it ahead of time, and just pass it to AnimatedBuilder.</p>\n<p>In this specific case, a <em>better</em> way to accomplish the same thing is to give BeamClipper a const constructor and just make it const. It’s less code, and the object is created at compile time, making things even faster. Sometimes, though, you’ll be coding something that doesn’t have a const constructor, and that’s a good case for when to make use of that optional child parameter.</p>\n<h3>AnimatedWidget</h3>\n<p>So, we have our animation, but the build method that contains the AnimatedBuilder code is a little large. If your build method is starting to get hard to read, it’s time to refactor your code!</p>\n<p>You could pull your AnimatedBuilder code out into a separate widget, but then you just have a build method inside a build method, which is a little silly. Instead, you can accomplish the same animation by creating a new widget that extends AnimatedWidget. I’ll name my widget BeamTransition to be consistent with the <em>FooTransition</em> naming convention for explicit animations. I pass in the animation controller to BeamTransition and reuse the body of the AnimatedBuilder’s builder function.</p>\n<a href=\"https://medium.com/media/2706bb6ba3d6d4837936792805c00e5d/href\">https://medium.com/media/2706bb6ba3d6d4837936792805c00e5d/href</a><p>Just like AnimatedBuilder, if appropriate, I can add a child parameter to my widget as a performance optimization so that it builds ahead of time, instead of every time I animate. Just a reminder though, in this example, making my BeamClipper take a const constructor is the best way to go.</p>\n<h3>So really, which one should I to use?</h3>\n<p>We just saw how AnimatedBuilder and AnimatedWidget can both be used to accomplish the same type of explicit animations when you can’t find a built-in explicit animation to do what you want. So, which one should you use? It’s really a matter of taste. Generally speaking, I recommend making individual widgets, each with a separate job — which in this case is animation.</p>\n<p>That’s a vote in favor of using AnimatedWidget whenever possible. However, if your parent widget that creates the animation controller is pretty simple, maybe making a separate standalone widget just for your animation is too much extra code. In that case, AnimatedBuilder is all that you need.</p>\n<p>This is an article version of the video below. If you prefer videos, click below:</p>\n<a href=\"https://medium.com/media/c67252c760e8dbd66c0f6df2aa09880b/href\">https://medium.com/media/c67252c760e8dbd66c0f6df2aa09880b/href</a><p>This article is part of a series! Check out the other articles here:</p>\n<ul>\n<li><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter Animation Basics with Implicit Animations</a></li>\n<li><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter … with TweenAnimationBuilder</a></li>\n<li><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional Animations with Built-in Explicit Animations</a></li>\n<li>When Should I use AnimatedBuilder or AnimatedWidget (this article!)</li>\n<li>Bare Metal Explicit Animations (coming soon!)</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=57ecae0959e8\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/when-should-i-useanimatedbuilder-or-animatedwidget-57ecae0959e8\">When should I useAnimatedBuilder or AnimatedWidget?</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "android-app-development",
                "flutter",
                "ios-app-development",
                "mobile-app-development",
                "flutter-widget"
            ]
        },
        {
            "title": "Directional animations with built-in explicit animations",
            "pubDate": "2020-01-10 19:26:50",
            "link": "https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/3e7c5e6fbbd7",
            "author": "Andrew Fitz Gibbon",
            "thumbnail": "https://cdn-images-1.medium.com/max/715/0*1xmX3Sfp_rLOAwwl",
            "description": "\n<p><em>To watch this post in video form, check out our YouTube video </em><a href=\"https://www.youtube.com/watch?v=CunyH6unILQ&amp;t=1s\"><em>here</em></a><em>.</em></p>\n<p>Hi! In our <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">previous</a> <a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">posts</a>, we learned how to do some awesome animations using Flutter’s implicit animations. AnimatedFoo and TweenAnimationBuilder gave you the ability to drop some basic animations into your app. These animations typically go in one direction, “tweening” from a start to an end, where they stop. Behind the scenes, Flutter is taking control, assuming intentions and disposing of any need for you to worry about the transition from one thing to the next.</p>\n<p>This works perfectly for many animation goals, but sometimes that ever-forward arrow of time leaves us feeling temporally locked. So, as we pause and contemplate the laws of thermodynamics and the inevitable heat death of the universe, wouldn’t it be nice if we could reverse time, and do it all again?</p>\n<p>Enter our first foray into Flutter’s explicit animations! We won’t be building any time machines today, but we will be learning how to gain a bit more control over your animations using Transition widgets.</p>\n<p>Transition widgets are a set of Flutter widgets whose names all end in — you guessed it —Transition. <a href=\"https://api.flutter.dev/flutter/widgets/ScaleTransition-class.html\">ScaleTransition</a>, <a href=\"https://api.flutter.dev/flutter/widgets/DecoratedBoxTransition-class.html\">DecoratedBoxTransition</a>, <a href=\"https://api.flutter.dev/flutter/widgets/SizeTransition-class.html\">SizeTransition</a>, and more. They look and feel a lot like our AnimatedBlah widgets. <a href=\"https://api.flutter.dev/flutter/widgets/PositionedTransition-class.html\">PositionedTransition</a>, for example, animates a widget’s transition between different positions. This is much like <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedPositioned-class.html\">AnimatedPositioned</a>, but there is one major difference: these Transition widgets are extensions of <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedWidget-class.htmlhttps://api.flutter.dev/flutter/widgets/AnimatedWidget-class.html\">AnimatedWidget</a>. This makes them <em>explicit animations</em>.</p>\n<p>But, what does that really mean for us as app developers? Let’s step through what makes these animations tick.</p>\n<p>Here, we’ll be creating an animation of galactic proportions, using this starting image. But, in this initial unanimated state, it doesn’t feel very galactic. Our first quest: to mix in some rotation.</p>\n<figure><img alt=\"An image of Fitz’s galaxy just sitting there, not rotating.\" src=\"https://cdn-images-1.medium.com/max/715/0*1xmX3Sfp_rLOAwwl\"><figcaption><em>An image of Fitz’s galaxy just sitting there, </em><strong><em>not </em></strong><em>rotating.</em></figcaption></figure><h3>RotationTransition as an example</h3>\n<p>The <a href=\"https://api.flutter.dev/flutter/widgets/RotationTransition-class.html\">RotationTransition</a> widget is a handy one that takes care of all of the trigonometry and transformations math to make things spin. Its constructor only takes three things:</p>\n<pre>// [Most of] RotationTransition’s constructor<br>RotationTransition({<br>  Widget child,<br>  Alignment alignment,<br>  Animation&lt;double&gt; turns,<br>})</pre>\n<p>First is a child —the widget we want to rotate. The galaxy fits, so we’ll put it there:</p>\n<pre>RotationTransition(<br>  child: GalaxyFitz(),<br>  alignment: null, /*TODO*/<br>  turns: null, /*TODO*/<br>)</pre>\n<p>Next, we need to give RotationTransition the point our galaxy rotates around. Our galaxy’s black hole is roughly in the middle of the image where we’d normally expect. So, we’ll give an alignment of center, making all of our rotational math “aligned” to that point.</p>\n<pre>RotationTransition(<br>  child: GalaxyFitz(),<br>  alignment: Alignment.center,<br>  turns: null, /*TODO*/<br>)</pre>\n<p>Last, what is this mysteriously named turns property? The API docs tell us this is… an Animation?!? Weren’t we creating an animation?</p>\n<figure><img alt=\"The RotationTransition docs tell us that turns is of type Animation.\" src=\"https://cdn-images-1.medium.com/max/467/0*6d-qda9iAUu26wjA\"><figcaption><em>The </em><a href=\"https://api.flutter.dev/flutter/widgets/RotationTransition-class.html\">RotationTransition</a><em> docs tell us that turns is of type Animation.</em></figcaption></figure><p>Not to worry! This is part of what makes RotationTransition, and all the other Transition widgets, an explicit animation. We <em>could</em> accomplish the same rotation effect with an AnimatedContainer and a transform, but then we’d rotate once and then stop. With our explicit animations, we have control of time and can make it so that our galaxy never stops spinning.</p>\n<figure><img alt=\"Astronomical tip of the day: Most galaxies take a bit longer than 5 seconds to complete one rotation.\" src=\"https://cdn-images-1.medium.com/max/254/0*WOcQ1I3-ThMzDyld\"><figcaption><em>Astronomical tip of the day: Most galaxies take </em><strong><em>a bit</em></strong><em> longer than 5 seconds to complete one rotation.</em></figcaption></figure><p>The turns property expects something that gives it a value and notifies it when that value changes. An Animation&lt;double&gt; is just that. For RotationTransition, the value corresponds to how many times we’ve turned, or more specifically, the percentage of one rotation completed.</p>\n<figure><img alt=\"A depiction of 12.6% of a galaxy.\" src=\"https://cdn-images-1.medium.com/max/784/0*VO7YjLAkYQsVLIWj\"><figcaption><em>It would take the solar system around 30 million years to complete 12.6% of a rotation around the Milky Way. Our Flutter Galaxy will spin </em><strong><em>slightly</em></strong><em> faster than that.</em></figcaption></figure><h3>Creating an AnimationController</h3>\n<p>One of the easiest ways to get an Animation&lt;double&gt; is to create an AnimationController, which is a <a href=\"https://api.flutter.dev/flutter/animation/AnimationController-class.html\">controller for an animation</a>. This controller handles listening for ticks¹ and gives us some useful controls over what the animation is doing.</p>\n<p>We’ll need to create this in a stateful widget because keeping a handle on the controller will be important in our not-too-distant future. Because AnimationController also has its own state to manage, we initialize it in initState, and dispose of it in dispose.</p>\n<a href=\"https://medium.com/media/2a0270795090d40d432e684daca52c85/href\">https://medium.com/media/2a0270795090d40d432e684daca52c85/href</a><p>There are two parameters we must give to AnimationController’s constructor. The first is a duration, which is how long our ̶t̶i̶m̶e̶ ̶m̶a̶c̶h̶i̶n̶e̶ animation lasts. The whole reason we’re here is that we need an object to tell us how far along we are in a single rotation. By default, AnimationController “emits” values from 0.0 to 1.0. How many and how granular those values are depends on how long we want a single rotation to take. Fortunately, Dart gives us a Duration class to use. For the sake of this demo, we should have the galaxy spinning somewhere between 5 seconds and 230 million years per rotation. How about 15 seconds per turn then?</p>\n<pre>_animationController = AnimationController(<br>  duration: Duration(seconds: 15),<br>  // TODO: finish constructing me.<br>);</pre>\n<p>The next required parameter is vsync. If you’re here from the future, welcome back! We hope you already know everything about vsync. For those who came here from the past, we’ll just say that this is what gives Flutter a reference to the object to notify about changes. this is that thing, and it needs to mix in some ticker provider code. A future post will dive into more detail about vsync and ticker providers.</p>\n<a href=\"https://medium.com/media/8ebd35749e4792877885eadc2b6f456d/href\">https://medium.com/media/8ebd35749e4792877885eadc2b6f456d/href</a><p>If we left things at that, nothing much happens. That’s because we’ve been given a controller, but haven’t pushed any of its buttons! We want our galaxy to spin forever, right? For that, we’ll just ask the controller to continually repeat the animation.</p>\n<pre>_animationController = AnimationController(<br>  duration: Duration(seconds: 15),<br>  vsync: this,<br>)..repeat();</pre>\n<p>Finally, we can go back and replace that null we left lingering around, by passing the animation controller to the turns parameter in our RotationTransition.</p>\n<pre>RotationTransition(<br>  child: GalaxyFitz(),<br>  alignment: Alignment.center,<br>  turns: _animationController,<br>)</pre>\n<p>And, although we now have an infinitely rotating galaxy, this still doesn’t quite feel like we have control of time. The galaxy just does its thing now, right? Don’t forget, though, we have a handle on a controller. Let’s make use of it.²</p>\n<h3>Making use of an AnimationController</h3>\n<p>Allowing anyone to control the galaxy seems a bit too permissive though, so I’m going to make it an easter egg. I’ll add a sibling to the galaxy that’s a simple button, hidden off in the corner, and I’ll pass it a reference to our controller, so that within its onTap listener, we can stop or restart the animation.</p>\n<a href=\"https://medium.com/media/b9d38eae73a83da8dd1df542f51beadb/href\">https://medium.com/media/b9d38eae73a83da8dd1df542f51beadb/href</a><p>The controller maintains — among other things — the status of the animation, which we can check and stop if we’re running or restart if we’re not. And, there you go! By using an animation controller, we’re able to control the animation on demand. But that’s not all you can do with the controller.</p>\n<a href=\"https://medium.com/media/b658332fdce29fddcffeb1b148d8ec6b/href\">https://medium.com/media/b658332fdce29fddcffeb1b148d8ec6b/href</a><p>With it, you can also animate to (or backwards from) a specific value, fling the animation forward with a given velocity, or control multiple animations with the same controller.</p>\n<figure><img alt=\"Keeping your galaxy clean of unwanted rockets.\" src=\"https://cdn-images-1.medium.com/max/254/0*UjrF-d2-BWLQyfEo\"><figcaption><em>Keeping your galaxy clean of unwanted rockets.</em></figcaption></figure><p>This was just our first taste of explicit animations in Flutter. We saw how a Transition widget works with AnimationController, to provide some directionality and control over how our animation works. In future posts, we’ll be diving deeper into explicit animations and how to get even more customized.</p>\n<figure><img alt=\"When the galaxy stops, everything stops.\" src=\"https://cdn-images-1.medium.com/max/254/0*eSjSmRfA6LMzx_Yc\"><figcaption><em>When the galaxy stops, everything stops</em></figcaption></figure><ol>\n<li><em>Galactic ticks are hard to hear, but AnimationController and TickerProviders help.</em></li>\n<li><em>As with all of your time controllers: use responsibly.</em></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3e7c5e6fbbd7\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional animations with built-in explicit animations</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p><em>To watch this post in video form, check out our YouTube video </em><a href=\"https://www.youtube.com/watch?v=CunyH6unILQ&amp;t=1s\"><em>here</em></a><em>.</em></p>\n<p>Hi! In our <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">previous</a> <a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">posts</a>, we learned how to do some awesome animations using Flutter’s implicit animations. AnimatedFoo and TweenAnimationBuilder gave you the ability to drop some basic animations into your app. These animations typically go in one direction, “tweening” from a start to an end, where they stop. Behind the scenes, Flutter is taking control, assuming intentions and disposing of any need for you to worry about the transition from one thing to the next.</p>\n<p>This works perfectly for many animation goals, but sometimes that ever-forward arrow of time leaves us feeling temporally locked. So, as we pause and contemplate the laws of thermodynamics and the inevitable heat death of the universe, wouldn’t it be nice if we could reverse time, and do it all again?</p>\n<p>Enter our first foray into Flutter’s explicit animations! We won’t be building any time machines today, but we will be learning how to gain a bit more control over your animations using Transition widgets.</p>\n<p>Transition widgets are a set of Flutter widgets whose names all end in — you guessed it —Transition. <a href=\"https://api.flutter.dev/flutter/widgets/ScaleTransition-class.html\">ScaleTransition</a>, <a href=\"https://api.flutter.dev/flutter/widgets/DecoratedBoxTransition-class.html\">DecoratedBoxTransition</a>, <a href=\"https://api.flutter.dev/flutter/widgets/SizeTransition-class.html\">SizeTransition</a>, and more. They look and feel a lot like our AnimatedBlah widgets. <a href=\"https://api.flutter.dev/flutter/widgets/PositionedTransition-class.html\">PositionedTransition</a>, for example, animates a widget’s transition between different positions. This is much like <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedPositioned-class.html\">AnimatedPositioned</a>, but there is one major difference: these Transition widgets are extensions of <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedWidget-class.htmlhttps://api.flutter.dev/flutter/widgets/AnimatedWidget-class.html\">AnimatedWidget</a>. This makes them <em>explicit animations</em>.</p>\n<p>But, what does that really mean for us as app developers? Let’s step through what makes these animations tick.</p>\n<p>Here, we’ll be creating an animation of galactic proportions, using this starting image. But, in this initial unanimated state, it doesn’t feel very galactic. Our first quest: to mix in some rotation.</p>\n<figure><img alt=\"An image of Fitz’s galaxy just sitting there, not rotating.\" src=\"https://cdn-images-1.medium.com/max/715/0*1xmX3Sfp_rLOAwwl\"><figcaption><em>An image of Fitz’s galaxy just sitting there, </em><strong><em>not </em></strong><em>rotating.</em></figcaption></figure><h3>RotationTransition as an example</h3>\n<p>The <a href=\"https://api.flutter.dev/flutter/widgets/RotationTransition-class.html\">RotationTransition</a> widget is a handy one that takes care of all of the trigonometry and transformations math to make things spin. Its constructor only takes three things:</p>\n<pre>// [Most of] RotationTransition’s constructor<br>RotationTransition({<br>  Widget child,<br>  Alignment alignment,<br>  Animation&lt;double&gt; turns,<br>})</pre>\n<p>First is a child —the widget we want to rotate. The galaxy fits, so we’ll put it there:</p>\n<pre>RotationTransition(<br>  child: GalaxyFitz(),<br>  alignment: null, /*TODO*/<br>  turns: null, /*TODO*/<br>)</pre>\n<p>Next, we need to give RotationTransition the point our galaxy rotates around. Our galaxy’s black hole is roughly in the middle of the image where we’d normally expect. So, we’ll give an alignment of center, making all of our rotational math “aligned” to that point.</p>\n<pre>RotationTransition(<br>  child: GalaxyFitz(),<br>  alignment: Alignment.center,<br>  turns: null, /*TODO*/<br>)</pre>\n<p>Last, what is this mysteriously named turns property? The API docs tell us this is… an Animation?!? Weren’t we creating an animation?</p>\n<figure><img alt=\"The RotationTransition docs tell us that turns is of type Animation.\" src=\"https://cdn-images-1.medium.com/max/467/0*6d-qda9iAUu26wjA\"><figcaption><em>The </em><a href=\"https://api.flutter.dev/flutter/widgets/RotationTransition-class.html\">RotationTransition</a><em> docs tell us that turns is of type Animation.</em></figcaption></figure><p>Not to worry! This is part of what makes RotationTransition, and all the other Transition widgets, an explicit animation. We <em>could</em> accomplish the same rotation effect with an AnimatedContainer and a transform, but then we’d rotate once and then stop. With our explicit animations, we have control of time and can make it so that our galaxy never stops spinning.</p>\n<figure><img alt=\"Astronomical tip of the day: Most galaxies take a bit longer than 5 seconds to complete one rotation.\" src=\"https://cdn-images-1.medium.com/max/254/0*WOcQ1I3-ThMzDyld\"><figcaption><em>Astronomical tip of the day: Most galaxies take </em><strong><em>a bit</em></strong><em> longer than 5 seconds to complete one rotation.</em></figcaption></figure><p>The turns property expects something that gives it a value and notifies it when that value changes. An Animation&lt;double&gt; is just that. For RotationTransition, the value corresponds to how many times we’ve turned, or more specifically, the percentage of one rotation completed.</p>\n<figure><img alt=\"A depiction of 12.6% of a galaxy.\" src=\"https://cdn-images-1.medium.com/max/784/0*VO7YjLAkYQsVLIWj\"><figcaption><em>It would take the solar system around 30 million years to complete 12.6% of a rotation around the Milky Way. Our Flutter Galaxy will spin </em><strong><em>slightly</em></strong><em> faster than that.</em></figcaption></figure><h3>Creating an AnimationController</h3>\n<p>One of the easiest ways to get an Animation&lt;double&gt; is to create an AnimationController, which is a <a href=\"https://api.flutter.dev/flutter/animation/AnimationController-class.html\">controller for an animation</a>. This controller handles listening for ticks¹ and gives us some useful controls over what the animation is doing.</p>\n<p>We’ll need to create this in a stateful widget because keeping a handle on the controller will be important in our not-too-distant future. Because AnimationController also has its own state to manage, we initialize it in initState, and dispose of it in dispose.</p>\n<a href=\"https://medium.com/media/2a0270795090d40d432e684daca52c85/href\">https://medium.com/media/2a0270795090d40d432e684daca52c85/href</a><p>There are two parameters we must give to AnimationController’s constructor. The first is a duration, which is how long our ̶t̶i̶m̶e̶ ̶m̶a̶c̶h̶i̶n̶e̶ animation lasts. The whole reason we’re here is that we need an object to tell us how far along we are in a single rotation. By default, AnimationController “emits” values from 0.0 to 1.0. How many and how granular those values are depends on how long we want a single rotation to take. Fortunately, Dart gives us a Duration class to use. For the sake of this demo, we should have the galaxy spinning somewhere between 5 seconds and 230 million years per rotation. How about 15 seconds per turn then?</p>\n<pre>_animationController = AnimationController(<br>  duration: Duration(seconds: 15),<br>  // TODO: finish constructing me.<br>);</pre>\n<p>The next required parameter is vsync. If you’re here from the future, welcome back! We hope you already know everything about vsync. For those who came here from the past, we’ll just say that this is what gives Flutter a reference to the object to notify about changes. this is that thing, and it needs to mix in some ticker provider code. A future post will dive into more detail about vsync and ticker providers.</p>\n<a href=\"https://medium.com/media/8ebd35749e4792877885eadc2b6f456d/href\">https://medium.com/media/8ebd35749e4792877885eadc2b6f456d/href</a><p>If we left things at that, nothing much happens. That’s because we’ve been given a controller, but haven’t pushed any of its buttons! We want our galaxy to spin forever, right? For that, we’ll just ask the controller to continually repeat the animation.</p>\n<pre>_animationController = AnimationController(<br>  duration: Duration(seconds: 15),<br>  vsync: this,<br>)..repeat();</pre>\n<p>Finally, we can go back and replace that null we left lingering around, by passing the animation controller to the turns parameter in our RotationTransition.</p>\n<pre>RotationTransition(<br>  child: GalaxyFitz(),<br>  alignment: Alignment.center,<br>  turns: _animationController,<br>)</pre>\n<p>And, although we now have an infinitely rotating galaxy, this still doesn’t quite feel like we have control of time. The galaxy just does its thing now, right? Don’t forget, though, we have a handle on a controller. Let’s make use of it.²</p>\n<h3>Making use of an AnimationController</h3>\n<p>Allowing anyone to control the galaxy seems a bit too permissive though, so I’m going to make it an easter egg. I’ll add a sibling to the galaxy that’s a simple button, hidden off in the corner, and I’ll pass it a reference to our controller, so that within its onTap listener, we can stop or restart the animation.</p>\n<a href=\"https://medium.com/media/b9d38eae73a83da8dd1df542f51beadb/href\">https://medium.com/media/b9d38eae73a83da8dd1df542f51beadb/href</a><p>The controller maintains — among other things — the status of the animation, which we can check and stop if we’re running or restart if we’re not. And, there you go! By using an animation controller, we’re able to control the animation on demand. But that’s not all you can do with the controller.</p>\n<a href=\"https://medium.com/media/b658332fdce29fddcffeb1b148d8ec6b/href\">https://medium.com/media/b658332fdce29fddcffeb1b148d8ec6b/href</a><p>With it, you can also animate to (or backwards from) a specific value, fling the animation forward with a given velocity, or control multiple animations with the same controller.</p>\n<figure><img alt=\"Keeping your galaxy clean of unwanted rockets.\" src=\"https://cdn-images-1.medium.com/max/254/0*UjrF-d2-BWLQyfEo\"><figcaption><em>Keeping your galaxy clean of unwanted rockets.</em></figcaption></figure><p>This was just our first taste of explicit animations in Flutter. We saw how a Transition widget works with AnimationController, to provide some directionality and control over how our animation works. In future posts, we’ll be diving deeper into explicit animations and how to get even more customized.</p>\n<figure><img alt=\"When the galaxy stops, everything stops.\" src=\"https://cdn-images-1.medium.com/max/254/0*eSjSmRfA6LMzx_Yc\"><figcaption><em>When the galaxy stops, everything stops</em></figcaption></figure><ol>\n<li><em>Galactic ticks are hard to hear, but AnimationController and TickerProviders help.</em></li>\n<li><em>As with all of your time controllers: use responsibly.</em></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3e7c5e6fbbd7\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional animations with built-in explicit animations</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "animation",
                "flutter",
                "android",
                "ios",
                "mobile-app-development"
            ]
        },
        {
            "title": "Custom Implicit Animations in Flutter…with TweenAnimationBuilder",
            "pubDate": "2019-12-15 05:24:55",
            "link": "https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/c76540b47185",
            "author": "Emily Fortuna",
            "thumbnail": "https://cdn-images-1.medium.com/max/840/1*1wJWHHPYfOYUCDBAcmIpjg.png",
            "description": "\n<p>To make animations in Flutter, there are many different options available. How do you choose the right animation widget? This article, <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">part</a> of <a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">our</a> animation series, delves into the best use cases for TweenAnimationBuilder versus when a different widget is best for the job. The previous article in this series explains just how powerful all the built-in implicit animation widgets are and how much you can accomplish with them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/840/1*1wJWHHPYfOYUCDBAcmIpjg.png\"><figcaption>A flow chart for understanding what animation to use in any scenario. This article focuses on the second-from-the-right “end state”, TweenAnimationBuilder.</figcaption></figure><p>Why use TweenAnimationBuilder? Suppose you want to create a <em>basic</em> animation: an animation that <em>doesn’t</em> repeat forever and is just one widget or widget tree. Flutter has a convention of naming its implicitly animated widgets AnimatedFoo, where Foo is the name of the property that animates. Don’t believe me? Here’s a sample of built-in, implicitly animated widgets: AnimatedContainer, AnimatedCrossFade, AnimatedDefaultTextStyle, AnimatedModalBarrier, AnimatedOpacity, AnimatedPadding, AnimatedPhysicalModel, AnimatedPositioned, AnimatedPositionedDirectional, AnimatedSwitcher. This set of widgets is impressively powerful, and you can accomplish a lot of your needs just using those. AnimatedContainer can even let you animate gradients and rotate widgets, all without needing to worry about an AnimationController!</p>\n<p>However, if you need to create a basic animation and none of those built-in implicit animations are what you’re looking for, you can still create that animation with TweenAnimationBuilder!</p>\n<h3>The basics</h3>\n<p>To use TweenAnimationBuilder, I set the length of time that I want my animation to take with the duration parameter, and the range of values that I want it to animate between with the…Tween parameter. As the name suggests, a Tween object enables you to specify a range of values that you want to animate <em>be</em><strong><em>tween</em></strong>.</p>\n<p>The last thing I need to specify is the builder parameter, which returns what my animated widget will look like at a given moment in time. This builder function takes a parameter that is the same type as your Tween values, which basically tells Flutter what the current animation value is at a given moment.</p>\n<a href=\"https://medium.com/media/6a0ac9548bfdb29c05be0250cab2f10c/href\">https://medium.com/media/6a0ac9548bfdb29c05be0250cab2f10c/href</a><h3>TweenAnimationBuilder in depth</h3>\n<p>The example code above showed the bare-minimum set of arguments necessary to use TweenAnimationBuilder, but there is a lot more this widget has to offer! For illustration purposes, I created an app for an extremely common use case: illustration of the Doppler effect in space. Okay, it’s a silly use case, but you might want to apply a color filter to an image and animate the changing colors…which is exactly what we’ll be doing in this scenario.</p>\n<p>In the Doppler effect, when a star moves away from you in space, the waves of light elongate, making the light shift closer to the red end of the spectrum. This effect is very subtle and not visible to the naked eye, but astronomers use it to determine the velocity of stars and galaxies relative to us.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/787/1*1-TXNn5MMPC7MDr4OZd-EA.gif\"><figcaption>Consult your local astrophysicist for more details.</figcaption></figure><p>In our app we’re going to make this a little less subtle. I have a nice image of a star, and to change its color, I’m going to use the ColorFiltered widget. I apply a blend mode, and tell it to blend orange into the image to make it a little more reddish.</p>\n<pre>ColorFiltered(<br>  child: Image.asset('assets/sun.png'),<br>  colorFilter: ColorFilter.mode(color, BlendMode.modulate),<br>)</pre>\n<p>Next step…animation! There isn’t a built-in widget that applies an arbitrary color filter to a widget, but we can build one ourselves with TweenAnimationBuilder. To change the color over time, we want to modify the color that we’re applying to the filter. So that’s the value that we’ll animate. We’ll put the ColorFiltered widget inside the builder function of the TweenAnimationBuilder. As I mentioned before, a Tween is just the range of values that we are animating between. In this case, we’ll use a ColorTween to animate between white, which is as if we had no filter, and orange. And there you have it! A nicely animated color filter in 10 lines of code.</p>\n<pre>TweenAnimationBuilder(<br>  tween: ColorTween(begin: Colors.white, end: Colors.red),<br>  duration: Duration(seconds: 2),<br>  builder: (_, Color color, __) {<br>    return ColorFiltered(<br>      child: Image.asset('assets/sun.png'),<br>      colorFilter: ColorFilter.mode(color, BlendMode.modulate),<br>    );<br>  },<br>)</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/1*_JRebndf4uwMwxVzyNunYg.gif\"></figure><p>Depending on <em>what</em> you want to animate though, your Tween can specify ranges between things other than colors or numbers. You can have a Tween with Offset objects to animate the change of a widget’s position, or you can even animate how the border of a widget changes! The point is you have a ton of options.</p>\n<p>Tweens are mutable, so if you know that you’re always going to animate between the same set of values, it’s best to declare your Tween as a static final variable in your class. That way, you don’t create a new object every time you rebuild.</p>\n<a href=\"https://medium.com/media/8753a7fc7b6befd1fb3aa3a2c4e0f56a/href\">https://medium.com/media/8753a7fc7b6befd1fb3aa3a2c4e0f56a/href</a><h3>Dynamically modifying Tween values</h3>\n<p>The previous example showed a really simple way to animate from one value to another without using setState or anything. But, you can do more with TweenAnimationBuilder by <em>dynamically modifying</em> your Tween value.</p>\n<a href=\"https://medium.com/media/f18e75a2f2704f301db06a1da4549f77/href\">https://medium.com/media/f18e75a2f2704f301db06a1da4549f77/href</a><p>I changed the code to also include a Slider widget. Then I declared a local variable called _newColor that takes the slider value and converts it to a color. _newColor is also used as the end value in my Tween. Now the animation updates every time I drag the slider.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/1*ZiMTAgg11y3BHH24bTt6Mg.gif\"></figure><p>One thing to keep in mind is that TweenAnimationBuilder always moves from the current value to the new end value. That means as I drag the slider, I see the color change relative to its previous color, rather than always animating from white at the very beginning. Just by setting a new end value to my Tween, I can reverse my animation or move to any point in between. TweenAnimationBuilder always smoothly animates between its current value and the new end point. As you can perhaps infer, this means dynamically changing the <em>start</em> of your Tween has no effect.</p>\n<a href=\"https://medium.com/media/89ab747597ba02ab52479f754c6d7fb9/href\">https://medium.com/media/89ab747597ba02ab52479f754c6d7fb9/href</a><h3>onEnd and child</h3>\n<p>There are a few other parameters that I haven’t talked about yet. The first one is the curve, to describe how we should transition between the beginning and end values in our Tween range. In the <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">previous article</a> we talked about how you can even create a custom curve, but there are a lot of great predefined options too.</p>\n<p>The second one is a callback you can specify, so you can do something when the animation completes. Perhaps you want to make another widget appear after this animation finishes. You can also use this callback as a way to reverse your animation back and forth. I recommend that you think carefully before doing this though. The callback makes the type of animation you’re trying to do less clear because the value setting is distributed through your code. Because the values are discontinuous (jumping back to the start again), if you want a repeating animation you’ll need some sort of explicit animation: either a built-in explicit animated widget or extending AnimatedWidget.</p>\n<a href=\"https://medium.com/media/5eea7d20788b2eb12c1b1d1c233ec83c/href\">https://medium.com/media/5eea7d20788b2eb12c1b1d1c233ec83c/href</a><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/1*7xwzsHM8FSwtXlWP_3q9qA.gif\"></figure><p>There’s one last parameter we haven’t discussed yet: the child parameter. Setting the child parameter is a potential performance optimization. Even though the color changes, the star image widget itself stays the same. As it’s currently written though, that image widget gets reconstructed every time that builder method gets called. We can build that star image ahead of time by passing it in as a child parameter. This way, Flutter knows the only widget that it needs to rebuild from frame to frame is the new color filter, not the star image itself. This example is simple so there’s really no noticeable difference. But, if we were animating a much more complex component, you can imagine performance optimization might become more important.</p>\n<a href=\"https://medium.com/media/e08c15fd8d812f65ba9ff245958a36fe/href\">https://medium.com/media/e08c15fd8d812f65ba9ff245958a36fe/href</a><h3>Summary</h3>\n<p>That’s all you need to know to write your own cool implicit animations with TweenAnimationBuilder! To recap, TweenAnimationBuilder is a great way to create “set-it-and-forget-it” implicit animations if you can’t find a built-in AnimatedFoo type widget. You can accomplish simple animations using TweenAnimationBuilder without needing to use a StatefulWidget. You can change that end value in the Tween to smoothly animate to a new value. There are also potential performance optimizations by passing in a child ahead of time or setting a static final Tween when appropriate. To learn more about which animation widget you should use when, check out the other articles in this series.</p>\n<p>This is the article version of the following video content. If you prefer videos, watch away:</p>\n<a href=\"https://medium.com/media/dfaa7fb86a51c1ae6105941f388a4ecf/href\">https://medium.com/media/dfaa7fb86a51c1ae6105941f388a4ecf/href</a><p>This article is part of a series! Check out the other articles here:</p>\n<ul>\n<li><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter Animation Basics with Implicit Animations</a></li>\n<li><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter … with TweenAnimationBuilder (that’s this article!)</a></li>\n<li><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional Animations with Built-in Explicit Animations</a></li>\n<li>When Should I use AnimatedBuilder or AnimatedWidget (coming soon!)</li>\n<li>Bare Metal Explicit Animations (coming soon!)</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c76540b47185\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter…with TweenAnimationBuilder</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>To make animations in Flutter, there are many different options available. How do you choose the right animation widget? This article, <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">part</a> of <a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">our</a> animation series, delves into the best use cases for TweenAnimationBuilder versus when a different widget is best for the job. The previous article in this series explains just how powerful all the built-in implicit animation widgets are and how much you can accomplish with them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/840/1*1wJWHHPYfOYUCDBAcmIpjg.png\"><figcaption>A flow chart for understanding what animation to use in any scenario. This article focuses on the second-from-the-right “end state”, TweenAnimationBuilder.</figcaption></figure><p>Why use TweenAnimationBuilder? Suppose you want to create a <em>basic</em> animation: an animation that <em>doesn’t</em> repeat forever and is just one widget or widget tree. Flutter has a convention of naming its implicitly animated widgets AnimatedFoo, where Foo is the name of the property that animates. Don’t believe me? Here’s a sample of built-in, implicitly animated widgets: AnimatedContainer, AnimatedCrossFade, AnimatedDefaultTextStyle, AnimatedModalBarrier, AnimatedOpacity, AnimatedPadding, AnimatedPhysicalModel, AnimatedPositioned, AnimatedPositionedDirectional, AnimatedSwitcher. This set of widgets is impressively powerful, and you can accomplish a lot of your needs just using those. AnimatedContainer can even let you animate gradients and rotate widgets, all without needing to worry about an AnimationController!</p>\n<p>However, if you need to create a basic animation and none of those built-in implicit animations are what you’re looking for, you can still create that animation with TweenAnimationBuilder!</p>\n<h3>The basics</h3>\n<p>To use TweenAnimationBuilder, I set the length of time that I want my animation to take with the duration parameter, and the range of values that I want it to animate between with the…Tween parameter. As the name suggests, a Tween object enables you to specify a range of values that you want to animate <em>be</em><strong><em>tween</em></strong>.</p>\n<p>The last thing I need to specify is the builder parameter, which returns what my animated widget will look like at a given moment in time. This builder function takes a parameter that is the same type as your Tween values, which basically tells Flutter what the current animation value is at a given moment.</p>\n<a href=\"https://medium.com/media/6a0ac9548bfdb29c05be0250cab2f10c/href\">https://medium.com/media/6a0ac9548bfdb29c05be0250cab2f10c/href</a><h3>TweenAnimationBuilder in depth</h3>\n<p>The example code above showed the bare-minimum set of arguments necessary to use TweenAnimationBuilder, but there is a lot more this widget has to offer! For illustration purposes, I created an app for an extremely common use case: illustration of the Doppler effect in space. Okay, it’s a silly use case, but you might want to apply a color filter to an image and animate the changing colors…which is exactly what we’ll be doing in this scenario.</p>\n<p>In the Doppler effect, when a star moves away from you in space, the waves of light elongate, making the light shift closer to the red end of the spectrum. This effect is very subtle and not visible to the naked eye, but astronomers use it to determine the velocity of stars and galaxies relative to us.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/787/1*1-TXNn5MMPC7MDr4OZd-EA.gif\"><figcaption>Consult your local astrophysicist for more details.</figcaption></figure><p>In our app we’re going to make this a little less subtle. I have a nice image of a star, and to change its color, I’m going to use the ColorFiltered widget. I apply a blend mode, and tell it to blend orange into the image to make it a little more reddish.</p>\n<pre>ColorFiltered(<br>  child: Image.asset('assets/sun.png'),<br>  colorFilter: ColorFilter.mode(color, BlendMode.modulate),<br>)</pre>\n<p>Next step…animation! There isn’t a built-in widget that applies an arbitrary color filter to a widget, but we can build one ourselves with TweenAnimationBuilder. To change the color over time, we want to modify the color that we’re applying to the filter. So that’s the value that we’ll animate. We’ll put the ColorFiltered widget inside the builder function of the TweenAnimationBuilder. As I mentioned before, a Tween is just the range of values that we are animating between. In this case, we’ll use a ColorTween to animate between white, which is as if we had no filter, and orange. And there you have it! A nicely animated color filter in 10 lines of code.</p>\n<pre>TweenAnimationBuilder(<br>  tween: ColorTween(begin: Colors.white, end: Colors.red),<br>  duration: Duration(seconds: 2),<br>  builder: (_, Color color, __) {<br>    return ColorFiltered(<br>      child: Image.asset('assets/sun.png'),<br>      colorFilter: ColorFilter.mode(color, BlendMode.modulate),<br>    );<br>  },<br>)</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/1*_JRebndf4uwMwxVzyNunYg.gif\"></figure><p>Depending on <em>what</em> you want to animate though, your Tween can specify ranges between things other than colors or numbers. You can have a Tween with Offset objects to animate the change of a widget’s position, or you can even animate how the border of a widget changes! The point is you have a ton of options.</p>\n<p>Tweens are mutable, so if you know that you’re always going to animate between the same set of values, it’s best to declare your Tween as a static final variable in your class. That way, you don’t create a new object every time you rebuild.</p>\n<a href=\"https://medium.com/media/8753a7fc7b6befd1fb3aa3a2c4e0f56a/href\">https://medium.com/media/8753a7fc7b6befd1fb3aa3a2c4e0f56a/href</a><h3>Dynamically modifying Tween values</h3>\n<p>The previous example showed a really simple way to animate from one value to another without using setState or anything. But, you can do more with TweenAnimationBuilder by <em>dynamically modifying</em> your Tween value.</p>\n<a href=\"https://medium.com/media/f18e75a2f2704f301db06a1da4549f77/href\">https://medium.com/media/f18e75a2f2704f301db06a1da4549f77/href</a><p>I changed the code to also include a Slider widget. Then I declared a local variable called _newColor that takes the slider value and converts it to a color. _newColor is also used as the end value in my Tween. Now the animation updates every time I drag the slider.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/1*ZiMTAgg11y3BHH24bTt6Mg.gif\"></figure><p>One thing to keep in mind is that TweenAnimationBuilder always moves from the current value to the new end value. That means as I drag the slider, I see the color change relative to its previous color, rather than always animating from white at the very beginning. Just by setting a new end value to my Tween, I can reverse my animation or move to any point in between. TweenAnimationBuilder always smoothly animates between its current value and the new end point. As you can perhaps infer, this means dynamically changing the <em>start</em> of your Tween has no effect.</p>\n<a href=\"https://medium.com/media/89ab747597ba02ab52479f754c6d7fb9/href\">https://medium.com/media/89ab747597ba02ab52479f754c6d7fb9/href</a><h3>onEnd and child</h3>\n<p>There are a few other parameters that I haven’t talked about yet. The first one is the curve, to describe how we should transition between the beginning and end values in our Tween range. In the <a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">previous article</a> we talked about how you can even create a custom curve, but there are a lot of great predefined options too.</p>\n<p>The second one is a callback you can specify, so you can do something when the animation completes. Perhaps you want to make another widget appear after this animation finishes. You can also use this callback as a way to reverse your animation back and forth. I recommend that you think carefully before doing this though. The callback makes the type of animation you’re trying to do less clear because the value setting is distributed through your code. Because the values are discontinuous (jumping back to the start again), if you want a repeating animation you’ll need some sort of explicit animation: either a built-in explicit animated widget or extending AnimatedWidget.</p>\n<a href=\"https://medium.com/media/5eea7d20788b2eb12c1b1d1c233ec83c/href\">https://medium.com/media/5eea7d20788b2eb12c1b1d1c233ec83c/href</a><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/1*7xwzsHM8FSwtXlWP_3q9qA.gif\"></figure><p>There’s one last parameter we haven’t discussed yet: the child parameter. Setting the child parameter is a potential performance optimization. Even though the color changes, the star image widget itself stays the same. As it’s currently written though, that image widget gets reconstructed every time that builder method gets called. We can build that star image ahead of time by passing it in as a child parameter. This way, Flutter knows the only widget that it needs to rebuild from frame to frame is the new color filter, not the star image itself. This example is simple so there’s really no noticeable difference. But, if we were animating a much more complex component, you can imagine performance optimization might become more important.</p>\n<a href=\"https://medium.com/media/e08c15fd8d812f65ba9ff245958a36fe/href\">https://medium.com/media/e08c15fd8d812f65ba9ff245958a36fe/href</a><h3>Summary</h3>\n<p>That’s all you need to know to write your own cool implicit animations with TweenAnimationBuilder! To recap, TweenAnimationBuilder is a great way to create “set-it-and-forget-it” implicit animations if you can’t find a built-in AnimatedFoo type widget. You can accomplish simple animations using TweenAnimationBuilder without needing to use a StatefulWidget. You can change that end value in the Tween to smoothly animate to a new value. There are also potential performance optimizations by passing in a child ahead of time or setting a static final Tween when appropriate. To learn more about which animation widget you should use when, check out the other articles in this series.</p>\n<p>This is the article version of the following video content. If you prefer videos, watch away:</p>\n<a href=\"https://medium.com/media/dfaa7fb86a51c1ae6105941f388a4ecf/href\">https://medium.com/media/dfaa7fb86a51c1ae6105941f388a4ecf/href</a><p>This article is part of a series! Check out the other articles here:</p>\n<ul>\n<li><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter Animation Basics with Implicit Animations</a></li>\n<li><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter … with TweenAnimationBuilder (that’s this article!)</a></li>\n<li><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional Animations with Built-in Explicit Animations</a></li>\n<li>When Should I use AnimatedBuilder or AnimatedWidget (coming soon!)</li>\n<li>Bare Metal Explicit Animations (coming soon!)</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c76540b47185\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter…with TweenAnimationBuilder</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "ios",
                "flutter-widget",
                "android",
                "mobile-app-development",
                "flutter"
            ]
        },
        {
            "title": "Announcing Flutter 1.12: What a year!",
            "pubDate": "2019-12-11 16:24:40",
            "link": "https://medium.com/flutter/announcing-flutter-1-12-what-a-year-22c256ba525d?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/22c256ba525d",
            "author": "Chris Sells",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*sW6TueDcNzw806cjigLJaA.png",
            "description": "\n<p><em>Posted by Chris Sells, Product Manager, Flutter developer experience</em></p>\n<p>Today we’re pleased to announce version 1.12, the latest stable Flutter release. This makes 5 stable releases since our 1.0 release in December, 2018. It’s been an amazing year! We’ve closed 5,303 issues and merged 5,950 pull requests from 484 contributors. In the Flutter engine and framework, we’ve added support for Android App Bundles, iOS 13, implemented mouse and keyboard events, released the In-App Purchase plugin, merged <a href=\"https://github.com/flutter/engine/pull/12385\">several</a> <a href=\"https://github.com/flutter/flutter/pull/36482\">important</a> <a href=\"https://github.com/flutter/engine/pull/10182\">performance</a> <a href=\"https://github.com/flutter/flutter/pull/37275\">improvements</a>, localized for 24 additional locales and created several new widgets. Furthermore, the Flutter tools have seen a great deal of improvement as well, with the release of Dart DevTools, which provides the widget inspector, memory and CPU profiling, and enhanced logging that can be used regardless of your editor/IDE of choice. Also, we’ve added auto-import of packages for referenced types, explicit ChromeOS support, UI Guides to make your build methods easier to read and write, and improved error messages with formatting, colors and more actionable wording.</p>\n<p>And with each release, we’ve said the same thing — that we’re just getting started. This continues to be true in this, our biggest release yet, coming from 188 contributors, closing 4,571 issues and merging 1,905 PRs. As in previous releases, enhancements abound for both the Flutter framework, and the tooling.</p>\n<h3>Flutter framework</h3>\n<p>This release includes a visual refresh to support iOS 13 that includes completed implementation of Dark Mode, new Cupertino widgets, several UX tweaks, and a greatly enhanced Add-to-App experience.</p>\n<h3>iOS 13 dark mode completed</h3>\n<p>More big news in Flutter 1.12 is the completion of our work to support the iOS 13 look and feel. This includes complete dark mode support in the Cupertino widgets.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sW6TueDcNzw806cjigLJaA.png\"></figure><p>If you’ll notice in the screen shots above, dark mode support is much more than just swapping out the background color, but also adapting the rest of the colors to be a good match. Such deep attention to dark mode was a huge amount of work, but worth it to get pixel-perfect iOS design support across both dark and light mode.</p>\n<p>Also, in our continuing goal for pixel-perfection for iOS 13, we’ve added two new widgets.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*seN7hLXrHJDEN3lH-IBZmw.png\"><figcaption><a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoContextMenu-class.html\">CupertinoContextMenu</a> and <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoSlidingSegmentedControl-class.html\">CupertinoSlidingSegmentedControl</a></figcaption></figure><p>And finally, in our quest to make a Flutter app feel as well as look native on iOS 13, we’ve <a href=\"https://github.com/flutter/flutter/pull/41799\">improved scrollbar fidelity</a>, <a href=\"https://github.com/flutter/flutter/pull/42967\">provided for adaptive CupertinoAlertDialog padding</a>, and <a href=\"https://github.com/flutter/flutter/pull/44149\">allowed for min/max date constraints on the CupertinoDatePicker</a>.</p>\n<h3>Add-to-App updated</h3>\n<p>Another improvement in our mobile support is an update to Add-to-App, which is the ability to integrate Flutter into an existing Android or iOS app. Here, we’ve been working on simplifying the integration flow to make adding a Flutter library to your app a better experience, including the addition of a new Flutter Module wizard in Android Studio.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bzkdx2Ls7IbhP1NZ\"></figure><p>With Flutter 1.12, Add-to-App is now officially supported for adding one fullscreen Flutter instance to your app. In supporting this functionality, we’ve also:</p>\n<ul>\n<li>Stabilized the APIs for platform integration in Java, Kotlin, Objective-C and Swift, including a new set of APIs for Android. See <a href=\"http://flutter.dev/go/android-project-migration\">the Android project migration docs</a> for details on changes.</li>\n<li>Added support for using plugins in embedded Flutter modules.</li>\n<li>Provided additional integration mechanisms via <a href=\"https://flutter.dev/docs/development/add-to-app/android/project-setup#option-a---depend-on-the-android-archive-aar\">Android AARs</a> and <a href=\"https://flutter.dev/docs/development/add-to-app/ios/project-setup#option-b---embed-frameworks-in-xcode\">iOS Frameworks</a> for better compatibility with existing build systems.</li>\n<li>Reworked the ‘flutter attach’ mechanism on the command-line tools, VSCode and IntelliJ plugins to easily attach onto a running Flutter module for debugging, DevTools and hot reload.</li>\n</ul>\n<p>To try Add-to-App, see the <a href=\"https://flutter.dev/docs/development/add-to-app\">website documentation</a> or browse our <a href=\"https://github.com/flutter/samples/tree/master/experimental/add_to_app\">sample projects</a> demonstrating various integration scenarios.</p>\n<h3>Dart 2.7</h3>\n<p>Of course, everything we do in Flutter is based on Dart, so if you haven’t already read about extension methods and safe string handling (including emojis), or want an update on null safety using non-nullable types, you can find that information in the <a href=\"https://medium.com/dartlang/dart-2-7-a3710ec54e97\">Dart 2.7 announcement</a>.</p>\n<h3>Beyond Flutter 1.12 stable</h3>\n<p>At the same time that Flutter is getting new features in the stable channel, it’s also getting new features beyond what you can do in stable, specifically a beta release of web support and an alpha release of macOS support.</p>\n<h3>Web support available in beta</h3>\n<p>The Flutter 1.12 master, dev and beta channels all provide improved support for web.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KNWOPgP4ZIQaobWo\"></figure><p>One happy customer of Flutter on the web is <a href=\"https://rivet.area120.com/link/flutter\">Rivet</a>, pictured above. Rivet is an education project that currently has a mobile app in production. They’re using Flutter and Firebase to build a web version of their app that they plan to launch in early 2020.</p>\n<p>You can learn more about what other customers are doing with Flutter’s web support as well as the rest of the details in the <a href=\"https://medium.com/flutter/web-support-for-flutter-goes-beta-35b64a1217c0\">Flutter web blog post</a>.</p>\n<h3>macOS moving to alpha</h3>\n<p>macOS desktop support isn’t far behind, moving from tech preview to alpha, available now in both master and dev channels (in Flutter SDK 1.13).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2cmIipg-JivBAlRW\"></figure><p>Pictured here at desktop size is <a href=\"https://flutter.github.io/samples/#/\">a new version of the Flutter Gallery</a> that’s been completely updated to support macOS in addition to Android, iOS, and web.</p>\n<p>The macOS alpha represents a big step forward for Flutter’s desktop support, including the new DataTree and Split sample widgets, several plugins ported to macOS, support for building in both release and profiling mode, and a greatly simplified tooling story. If you’re running from the dev or master channel, you can gain access to the macOS tooling by enabling macOS desktop support in Flutter’s system-wide config:</p>\n<p>$ flutter config --enable-macos-desktop</p>\n<p>Creating a Flutter project that runs on macOS is now just like creating any other new Flutter project with ‘flutter create’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0IEDbMjBcAYcEayr\"><figcaption>Notice the new macos directory created by default</figcaption></figure><p>In addition to the tooling support, we’ve also been working on the density that’s appropriate for desktop-sized apps. Mobile apps need relatively large controls to accommodate touch interactions whereas on desktop-sized devices, a user is more likely to be using a mouse. In bringing Flutter to the desktop, we’ve worked on allowing you to choose the density of your widgets to better accommodate the needs of your desktop users:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/419/0*lz9RcWYLigKtCaFp\"><figcaption><a href=\"https://github.com/gspencergoog/density_sample\">Sample</a> demonstrating Flutter’s implementation of <a href=\"https://material.io/design/layout/applying-density.html\">the Material Density guidelines</a></figcaption></figure><p>And finally, to improve the experience of Flutter desktop apps, we’ve done a lot of work on keyboard navigation and keyboard access, including:</p>\n<ul>\n<li><a href=\"https://github.com/flutter/flutter/pull/43948\">synchronizing modifier keys with key events</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43722\">managing item selection when a dropdown is opened</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43859\">adding a convenience accessor for primary focus</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43384\">adding keyboard navigation, hover and shortcuts for switches</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43384\">checkboxes and radio buttons</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44965\">automatic scrolling to keep focused items in view</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/45019\">keyboard shortcut-based scrolling</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44867\">a new widget for handling focus and hover</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44130\">rewritten copy/paste and keyboard selection</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/42811\">keyboard navigation of dropdowns</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43547\">visual density support</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44410\">adding macOS function key support</a></li>\n</ul>\n<p>In addition to the Flutter sample, we also recommend <a href=\"https://github.com/flutter/samples/tree/master/experimental/desktop_photo_search\">the new Photos Search sample</a>, which shows off a lot of desktop goodness, including keyboard handling, the new widget density, the new plugins, and the new widgets.</p>\n<p>For those of you curious about progress on Windows and Linux, they’re still in technical preview, but both benefit from a lot of the work to get macOS to alpha. We’ll share the updates to those platforms soon. For more details of where we are with desktop support in Flutter for macOS, Windows and Linux, please see <a href=\"http://flutter.dev/desktop\">flutter.dev/desktop</a>.</p>\n<h3>Flutter tooling</h3>\n<p>In addition to the Framework and Engine, we also have a lot to talk about for Flutter tooling. This includes a new version of DartPad with support for Flutter, augmented IntelliJ-based IDEs with a preview of a new feature we’re calling “Hot UI”, enhanced Dart DevTools with a new visual layout view, enabled simultaneous multi-device debugging in Visual Studio Code, improved the Android build process and better support for finding differences in rendered widgets between test runs.</p>\n<h3>DartPad loves Flutter</h3>\n<p>If you aren’t already using <a href=\"https://dartpad.dev/\">DartPad</a>, you should try it out! It’s a great way to try Dart features without installing anything. Furthermore, with the new release of DartPad, now you get Flutter, too!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O2FY0bB-BCao1kH2\"></figure><p>The new DartPad leverages Flutter’s web support so that when you’re writing Flutter code on the left, you’re running a real, live Flutter (web) program on the right. The chief difference is that using DartPad, you can get started with Flutter without installing a thing.</p>\n<p>In addition to the stand-alone DartPad playground, we’ve also started adding DartPad with Flutter support into our docs and in our codelabs (like <a href=\"https://flutter.dev/docs/codelabs/layout-basics\">Basic Flutter layout concepts</a> and <a href=\"https://flutter.dev/docs/codelabs/implicit-animations\">Implicit animations</a>), so that you can learn about Flutter from the comfort of your browser. For more information on DartPad, please check out our <a href=\"https://medium.com/dartlang/a-brand-new-dartpad-dev-with-flutter-support-16fe6027784\">DartPad announcement post</a>.</p>\n<h3>Build your widgets inline with Hot UI</h3>\n<p>If you install the Flutter tools locally on your own machine (and we hope you will), you’ll find a new feature previewed in the IntelliJ/Android Studio plugin for Flutter. It allows you to see and interact with your widgets directly in your IDE as you’re building them.</p>\n<p>We call this feature “Hot UI” and, like Hot Reload, as you make the changes in your code, it updates the hosted UI directly. You can also interact with the hosted UI (like changing a color, as shown here) and that change goes directly into your code. To enable the Hot UI preview, you can <a href=\"https://github.com/flutter/flutter-intellij/wiki/HotUI-Getting-Started-instructions\">read the instructions on the Flutter wiki</a>.</p>\n<h3>Debug layout issues with the Layout Explorer</h3>\n<p>Whether you write the code by hand or let Hot UI write it for you, you’ve still got code and sometimes code has issues. Helping you track down and fix your issues is exactly why Dart DevTools was invented. In this new version of DevTools, we’ve added a feature called the “Layout Explorer” to augment the Inspector with a visual representation of your layout.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*qQ342c4cR9qRce74\"></figure><p>Not only does the Layout Explorer help you to visualize the layout of the widgets in your running app, but if you’d like to experiment with changing the layout options, it allows you to do so interactively. We’re hoping the preview of this feature helps make it easier to understand and fix your layout issues. To enable this feature, see <a href=\"https://flutter.dev/docs/development/tools/devtools/inspector#flutter-layout-explorer\">the Layout Explorer docs</a>.</p>\n<h3>Multi-device debugging</h3>\n<p>When you’ve built and debugged your Flutter UI, you have most likely done it on a single device. Wouldn’t it be nice to be able to debug your app across multiple devices (physical or virtual) at the same time? With Flutter’s support for multi-session debugging in Visual Code, that’s just what you can do.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cEO7t2m1M3nH9RWx0CJtaQ.png\"></figure><p>Here we’ve got the same Flutter app running simultaneously on three separate debugging sessions. If we make a change in the code, Hot Reload makes sure that it’s reflected in all three apps. If we set a breakpoint, whichever app triggers that code gets stopped. If you’d like to stop debugging one, you can do so without stopping them all. You can learn how to configure this feature for <a href=\"https://github.com/flutter/flutter/wiki/Multi-device-debugging-in-VS-Code\">multiple device debugging on the wiki</a>.</p>\n<h3>Android build improvements</h3>\n<p>And finally, to continue to improve Android, we addressed some build problems in this release. Firstly, we made the Android build more robust, specifically around combining plugins using Support Libraries and those using AndroidX. We did this by moving the Flutter team’s plugins to AndroidX and <a href=\"https://flutter.dev/docs/development/packages-and-plugins/plugin-api-migration\">we recommend that apps and plugins move to AndroidX as well</a>. However, for plugins that haven’t yet moved, if there is a build problem, we have an alternate code path in our build that uses Android Archive files and Jetifier. The build is slower, which is why it’s not the primary build mechanism, but we find that it solves about 95% of the build problems we’ve encountered.</p>\n<p>Another issue we addressed was deprecating Proguard in favor of <a href=\"https://developer.android.com/studio/build/shrink-code\">R8</a>, the new code optimizer from Google. Before this release, the app author had to configure ProGuard rules manually using guidance provided by the plugin author. In this release, plugins can define their rules in the source code and R8 consumes these rules automatically, saving the app developer that headache.</p>\n<p>Furthermore, in our attempt to continue to make Flutter as slim as possible, we reduced the Hello, World app size for Android by 2.6% (reducing it from 3.8MB to 3.7MB). Every little bit helps!</p>\n<h3>Golden image testing</h3>\n<p>The term “golden image” refers to a master image file that is considered the true rendering of a given widget, state, application, or other visual representation you have chosen to capture. In Flutter 1.12, we have implementations of the <a href=\"https://api.flutter.dev/flutter/flutter_test/GoldenFileComparator-class.html\">GoldenFileComparator</a> and <a href=\"https://api.flutter.dev/flutter/flutter_test/LocalFileComparator-class.html\">LocalFileComparator</a> classes that compare by pixels instead of bits, <a href=\"https://github.com/flutter/flutter/issues/30036\">eliminating false positives</a>. These new implementations highlight visual differences to make it clear when there are differences between your golden image and the updates under testing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/814/0*RfJiqYXXSujb8WCs\"></figure><p>In this case, it’s clear that the differences between the master and the test image are all in the border, making it much easier to track down the discrepancy.</p>\n<h3>Community</h3>\n<p>In addition to all of the work on Flutter and its associated tooling, the Flutter community continues to take Flutter into new and amazing directions! To see what developers in the community are doing, we’ve put together a little video.</p>\n<a href=\"https://medium.com/media/e392f1a410228fd35310a5028a5861cf/href\">https://medium.com/media/e392f1a410228fd35310a5028a5861cf/href</a><p>We’re so lucky to have such a great set of developers in the Flutter community. You make us all proud to be on the Flutter team!</p>\n<h3>Flutter Favorite packages</h3>\n<p>When we released Flutter 1.0 in December, 2018, there were about 1000 packages on pub.dev that supported Flutter and we thought that was a huge number. As of this writing, that number has increased by more than 6x. With that many options, it’s sometimes hard to know which packages to choose. The overall score on pub.dev helps as well as the new <a href=\"https://medium.com/dartlang/verified-publishers-98f05466558a\">Verified Publishers</a> feature. Now, pub.dev is getting <a href=\"http://go/dart-2.7-annoucement\">a rating system</a>, which should help even more.</p>\n<p>Still, our users have asked again and again for a set of “recommended” packages and plugins. With that in mind, we’re pleased to announce <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">the Flutter Favorite program</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8Q2gB989P4yclIqD\"></figure><p>A Flutter Favorite package (or plugin) is one that we think that you should consider first when building your app. The “we” in that sentence is the Flutter Ecosystem Committee, a group of regionally-diverse individuals picked from the Flutter team at Google and from the Flutter community at large to address issues across the Flutter ecosystem. Their first job was to establish a high quality bar and to identify an initial set of packages that met that quality bar. The authors of those packages are able to use the Flutter Favorite logo in their package documentation. Furthermore, pub.dev has been updated to show the logo in search results and other places.</p>\n<p>For details, see <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">the Flutter Favorite page on flutter.dev</a>. You can also see <a href=\"https://pub.dev/flutter/favorites\">the complete list of Flutter Favorite packages on pub.dev</a>. The bottom line is that if you’re an app developer and you see that logo, you should have confidence in that package. If you’re a package author and you’ve been awarded the Flutter Favorite logo, thank you for your contribution to the Flutter ecosystem.</p>\n<h3>Community tools</h3>\n<p>And speaking of contributions to be proud of, the Flutter community at large has been building a number of excellent tools as well; here’s just a selection.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mCfvSsh_GZmW2xYn\"><figcaption><a href=\"https://github.com/aloisdeniel/flutter_device_preview\">Flutter Device Preview</a></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ArEfmlujiPiVUD1v\"><figcaption><a href=\"https://www.widgetmaker.dev/\">Widget Maker</a></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vJh-yghl3kJJdW0ZakbSzg.png\"><figcaption><a href=\"https://rxlabz.github.io/panache/#/\">Panache</a></figcaption></figure><h3>Featured tooling partner: Nevercode</h3>\n<p>In addition to a great set of community tools, the Flutter ecosystem has a great set of tooling partners as well. One notable partner has always been Nevercode, who have a whole new set of features in their latest release, including <a href=\"https://marketplace.visualstudio.com/items?itemName=codemagic.remote-mac\">a Visual Studio Code plugin called Remote Mac</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cmfHUry8I1ztX80M\"></figure><p>The Remote Mac extension lets you connect directly to a Mac that they’ve hosted in the cloud for purposes of testing your iOS and macOS Flutter code. For more details about Nevercode’s latest release, including new support for Flutter on the web and on macOS, new enterprise features and more, check out <a href=\"https://blog.codemagic.io/more-professional-capable-accessible/\">their newest blog post</a>.</p>\n<p>To see the progress being made by our other tooling partners, you should definitely <a href=\"https://developers.googleblog.com/2019/12/flutter-ui-ambient-computing.html\">check out what Supernova, Rive and Adobe are up to in their latest releases</a>.</p>\n<h3>Conclusion</h3>\n<p>This has definitely been a big year for Flutter and v1.12 is a big release. This blog post has been a whirlwind tour of what’s new in this release; if you’d like to check on your favorite pull release, see where we’ve been spending our time in this release by how many pull releases in each area or see what we broke, then we recommend <a href=\"https://flutter.dev/docs/development/tools/sdk/release-notes/release-notes-1.12.13\">the Flutter 1.12 Release Notes</a>.</p>\n<p>We hope you agree that Flutter is moving in the right direction and picking up speed. With all of these new features and new tools, where do you want your app to run today?</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=22c256ba525d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/announcing-flutter-1-12-what-a-year-22c256ba525d\">Announcing Flutter 1.12: What a year!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p><em>Posted by Chris Sells, Product Manager, Flutter developer experience</em></p>\n<p>Today we’re pleased to announce version 1.12, the latest stable Flutter release. This makes 5 stable releases since our 1.0 release in December, 2018. It’s been an amazing year! We’ve closed 5,303 issues and merged 5,950 pull requests from 484 contributors. In the Flutter engine and framework, we’ve added support for Android App Bundles, iOS 13, implemented mouse and keyboard events, released the In-App Purchase plugin, merged <a href=\"https://github.com/flutter/engine/pull/12385\">several</a> <a href=\"https://github.com/flutter/flutter/pull/36482\">important</a> <a href=\"https://github.com/flutter/engine/pull/10182\">performance</a> <a href=\"https://github.com/flutter/flutter/pull/37275\">improvements</a>, localized for 24 additional locales and created several new widgets. Furthermore, the Flutter tools have seen a great deal of improvement as well, with the release of Dart DevTools, which provides the widget inspector, memory and CPU profiling, and enhanced logging that can be used regardless of your editor/IDE of choice. Also, we’ve added auto-import of packages for referenced types, explicit ChromeOS support, UI Guides to make your build methods easier to read and write, and improved error messages with formatting, colors and more actionable wording.</p>\n<p>And with each release, we’ve said the same thing — that we’re just getting started. This continues to be true in this, our biggest release yet, coming from 188 contributors, closing 4,571 issues and merging 1,905 PRs. As in previous releases, enhancements abound for both the Flutter framework, and the tooling.</p>\n<h3>Flutter framework</h3>\n<p>This release includes a visual refresh to support iOS 13 that includes completed implementation of Dark Mode, new Cupertino widgets, several UX tweaks, and a greatly enhanced Add-to-App experience.</p>\n<h3>iOS 13 dark mode completed</h3>\n<p>More big news in Flutter 1.12 is the completion of our work to support the iOS 13 look and feel. This includes complete dark mode support in the Cupertino widgets.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sW6TueDcNzw806cjigLJaA.png\"></figure><p>If you’ll notice in the screen shots above, dark mode support is much more than just swapping out the background color, but also adapting the rest of the colors to be a good match. Such deep attention to dark mode was a huge amount of work, but worth it to get pixel-perfect iOS design support across both dark and light mode.</p>\n<p>Also, in our continuing goal for pixel-perfection for iOS 13, we’ve added two new widgets.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*seN7hLXrHJDEN3lH-IBZmw.png\"><figcaption><a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoContextMenu-class.html\">CupertinoContextMenu</a> and <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoSlidingSegmentedControl-class.html\">CupertinoSlidingSegmentedControl</a></figcaption></figure><p>And finally, in our quest to make a Flutter app feel as well as look native on iOS 13, we’ve <a href=\"https://github.com/flutter/flutter/pull/41799\">improved scrollbar fidelity</a>, <a href=\"https://github.com/flutter/flutter/pull/42967\">provided for adaptive CupertinoAlertDialog padding</a>, and <a href=\"https://github.com/flutter/flutter/pull/44149\">allowed for min/max date constraints on the CupertinoDatePicker</a>.</p>\n<h3>Add-to-App updated</h3>\n<p>Another improvement in our mobile support is an update to Add-to-App, which is the ability to integrate Flutter into an existing Android or iOS app. Here, we’ve been working on simplifying the integration flow to make adding a Flutter library to your app a better experience, including the addition of a new Flutter Module wizard in Android Studio.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bzkdx2Ls7IbhP1NZ\"></figure><p>With Flutter 1.12, Add-to-App is now officially supported for adding one fullscreen Flutter instance to your app. In supporting this functionality, we’ve also:</p>\n<ul>\n<li>Stabilized the APIs for platform integration in Java, Kotlin, Objective-C and Swift, including a new set of APIs for Android. See <a href=\"http://flutter.dev/go/android-project-migration\">the Android project migration docs</a> for details on changes.</li>\n<li>Added support for using plugins in embedded Flutter modules.</li>\n<li>Provided additional integration mechanisms via <a href=\"https://flutter.dev/docs/development/add-to-app/android/project-setup#option-a---depend-on-the-android-archive-aar\">Android AARs</a> and <a href=\"https://flutter.dev/docs/development/add-to-app/ios/project-setup#option-b---embed-frameworks-in-xcode\">iOS Frameworks</a> for better compatibility with existing build systems.</li>\n<li>Reworked the ‘flutter attach’ mechanism on the command-line tools, VSCode and IntelliJ plugins to easily attach onto a running Flutter module for debugging, DevTools and hot reload.</li>\n</ul>\n<p>To try Add-to-App, see the <a href=\"https://flutter.dev/docs/development/add-to-app\">website documentation</a> or browse our <a href=\"https://github.com/flutter/samples/tree/master/experimental/add_to_app\">sample projects</a> demonstrating various integration scenarios.</p>\n<h3>Dart 2.7</h3>\n<p>Of course, everything we do in Flutter is based on Dart, so if you haven’t already read about extension methods and safe string handling (including emojis), or want an update on null safety using non-nullable types, you can find that information in the <a href=\"https://medium.com/dartlang/dart-2-7-a3710ec54e97\">Dart 2.7 announcement</a>.</p>\n<h3>Beyond Flutter 1.12 stable</h3>\n<p>At the same time that Flutter is getting new features in the stable channel, it’s also getting new features beyond what you can do in stable, specifically a beta release of web support and an alpha release of macOS support.</p>\n<h3>Web support available in beta</h3>\n<p>The Flutter 1.12 master, dev and beta channels all provide improved support for web.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KNWOPgP4ZIQaobWo\"></figure><p>One happy customer of Flutter on the web is <a href=\"https://rivet.area120.com/link/flutter\">Rivet</a>, pictured above. Rivet is an education project that currently has a mobile app in production. They’re using Flutter and Firebase to build a web version of their app that they plan to launch in early 2020.</p>\n<p>You can learn more about what other customers are doing with Flutter’s web support as well as the rest of the details in the <a href=\"https://medium.com/flutter/web-support-for-flutter-goes-beta-35b64a1217c0\">Flutter web blog post</a>.</p>\n<h3>macOS moving to alpha</h3>\n<p>macOS desktop support isn’t far behind, moving from tech preview to alpha, available now in both master and dev channels (in Flutter SDK 1.13).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2cmIipg-JivBAlRW\"></figure><p>Pictured here at desktop size is <a href=\"https://flutter.github.io/samples/#/\">a new version of the Flutter Gallery</a> that’s been completely updated to support macOS in addition to Android, iOS, and web.</p>\n<p>The macOS alpha represents a big step forward for Flutter’s desktop support, including the new DataTree and Split sample widgets, several plugins ported to macOS, support for building in both release and profiling mode, and a greatly simplified tooling story. If you’re running from the dev or master channel, you can gain access to the macOS tooling by enabling macOS desktop support in Flutter’s system-wide config:</p>\n<p>$ flutter config --enable-macos-desktop</p>\n<p>Creating a Flutter project that runs on macOS is now just like creating any other new Flutter project with ‘flutter create’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0IEDbMjBcAYcEayr\"><figcaption>Notice the new macos directory created by default</figcaption></figure><p>In addition to the tooling support, we’ve also been working on the density that’s appropriate for desktop-sized apps. Mobile apps need relatively large controls to accommodate touch interactions whereas on desktop-sized devices, a user is more likely to be using a mouse. In bringing Flutter to the desktop, we’ve worked on allowing you to choose the density of your widgets to better accommodate the needs of your desktop users:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/419/0*lz9RcWYLigKtCaFp\"><figcaption><a href=\"https://github.com/gspencergoog/density_sample\">Sample</a> demonstrating Flutter’s implementation of <a href=\"https://material.io/design/layout/applying-density.html\">the Material Density guidelines</a></figcaption></figure><p>And finally, to improve the experience of Flutter desktop apps, we’ve done a lot of work on keyboard navigation and keyboard access, including:</p>\n<ul>\n<li><a href=\"https://github.com/flutter/flutter/pull/43948\">synchronizing modifier keys with key events</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43722\">managing item selection when a dropdown is opened</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43859\">adding a convenience accessor for primary focus</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43384\">adding keyboard navigation, hover and shortcuts for switches</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43384\">checkboxes and radio buttons</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44965\">automatic scrolling to keep focused items in view</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/45019\">keyboard shortcut-based scrolling</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44867\">a new widget for handling focus and hover</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44130\">rewritten copy/paste and keyboard selection</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/42811\">keyboard navigation of dropdowns</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/43547\">visual density support</a></li>\n<li><a href=\"https://github.com/flutter/flutter/pull/44410\">adding macOS function key support</a></li>\n</ul>\n<p>In addition to the Flutter sample, we also recommend <a href=\"https://github.com/flutter/samples/tree/master/experimental/desktop_photo_search\">the new Photos Search sample</a>, which shows off a lot of desktop goodness, including keyboard handling, the new widget density, the new plugins, and the new widgets.</p>\n<p>For those of you curious about progress on Windows and Linux, they’re still in technical preview, but both benefit from a lot of the work to get macOS to alpha. We’ll share the updates to those platforms soon. For more details of where we are with desktop support in Flutter for macOS, Windows and Linux, please see <a href=\"http://flutter.dev/desktop\">flutter.dev/desktop</a>.</p>\n<h3>Flutter tooling</h3>\n<p>In addition to the Framework and Engine, we also have a lot to talk about for Flutter tooling. This includes a new version of DartPad with support for Flutter, augmented IntelliJ-based IDEs with a preview of a new feature we’re calling “Hot UI”, enhanced Dart DevTools with a new visual layout view, enabled simultaneous multi-device debugging in Visual Studio Code, improved the Android build process and better support for finding differences in rendered widgets between test runs.</p>\n<h3>DartPad loves Flutter</h3>\n<p>If you aren’t already using <a href=\"https://dartpad.dev/\">DartPad</a>, you should try it out! It’s a great way to try Dart features without installing anything. Furthermore, with the new release of DartPad, now you get Flutter, too!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O2FY0bB-BCao1kH2\"></figure><p>The new DartPad leverages Flutter’s web support so that when you’re writing Flutter code on the left, you’re running a real, live Flutter (web) program on the right. The chief difference is that using DartPad, you can get started with Flutter without installing a thing.</p>\n<p>In addition to the stand-alone DartPad playground, we’ve also started adding DartPad with Flutter support into our docs and in our codelabs (like <a href=\"https://flutter.dev/docs/codelabs/layout-basics\">Basic Flutter layout concepts</a> and <a href=\"https://flutter.dev/docs/codelabs/implicit-animations\">Implicit animations</a>), so that you can learn about Flutter from the comfort of your browser. For more information on DartPad, please check out our <a href=\"https://medium.com/dartlang/a-brand-new-dartpad-dev-with-flutter-support-16fe6027784\">DartPad announcement post</a>.</p>\n<h3>Build your widgets inline with Hot UI</h3>\n<p>If you install the Flutter tools locally on your own machine (and we hope you will), you’ll find a new feature previewed in the IntelliJ/Android Studio plugin for Flutter. It allows you to see and interact with your widgets directly in your IDE as you’re building them.</p>\n<p>We call this feature “Hot UI” and, like Hot Reload, as you make the changes in your code, it updates the hosted UI directly. You can also interact with the hosted UI (like changing a color, as shown here) and that change goes directly into your code. To enable the Hot UI preview, you can <a href=\"https://github.com/flutter/flutter-intellij/wiki/HotUI-Getting-Started-instructions\">read the instructions on the Flutter wiki</a>.</p>\n<h3>Debug layout issues with the Layout Explorer</h3>\n<p>Whether you write the code by hand or let Hot UI write it for you, you’ve still got code and sometimes code has issues. Helping you track down and fix your issues is exactly why Dart DevTools was invented. In this new version of DevTools, we’ve added a feature called the “Layout Explorer” to augment the Inspector with a visual representation of your layout.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*qQ342c4cR9qRce74\"></figure><p>Not only does the Layout Explorer help you to visualize the layout of the widgets in your running app, but if you’d like to experiment with changing the layout options, it allows you to do so interactively. We’re hoping the preview of this feature helps make it easier to understand and fix your layout issues. To enable this feature, see <a href=\"https://flutter.dev/docs/development/tools/devtools/inspector#flutter-layout-explorer\">the Layout Explorer docs</a>.</p>\n<h3>Multi-device debugging</h3>\n<p>When you’ve built and debugged your Flutter UI, you have most likely done it on a single device. Wouldn’t it be nice to be able to debug your app across multiple devices (physical or virtual) at the same time? With Flutter’s support for multi-session debugging in Visual Code, that’s just what you can do.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cEO7t2m1M3nH9RWx0CJtaQ.png\"></figure><p>Here we’ve got the same Flutter app running simultaneously on three separate debugging sessions. If we make a change in the code, Hot Reload makes sure that it’s reflected in all three apps. If we set a breakpoint, whichever app triggers that code gets stopped. If you’d like to stop debugging one, you can do so without stopping them all. You can learn how to configure this feature for <a href=\"https://github.com/flutter/flutter/wiki/Multi-device-debugging-in-VS-Code\">multiple device debugging on the wiki</a>.</p>\n<h3>Android build improvements</h3>\n<p>And finally, to continue to improve Android, we addressed some build problems in this release. Firstly, we made the Android build more robust, specifically around combining plugins using Support Libraries and those using AndroidX. We did this by moving the Flutter team’s plugins to AndroidX and <a href=\"https://flutter.dev/docs/development/packages-and-plugins/plugin-api-migration\">we recommend that apps and plugins move to AndroidX as well</a>. However, for plugins that haven’t yet moved, if there is a build problem, we have an alternate code path in our build that uses Android Archive files and Jetifier. The build is slower, which is why it’s not the primary build mechanism, but we find that it solves about 95% of the build problems we’ve encountered.</p>\n<p>Another issue we addressed was deprecating Proguard in favor of <a href=\"https://developer.android.com/studio/build/shrink-code\">R8</a>, the new code optimizer from Google. Before this release, the app author had to configure ProGuard rules manually using guidance provided by the plugin author. In this release, plugins can define their rules in the source code and R8 consumes these rules automatically, saving the app developer that headache.</p>\n<p>Furthermore, in our attempt to continue to make Flutter as slim as possible, we reduced the Hello, World app size for Android by 2.6% (reducing it from 3.8MB to 3.7MB). Every little bit helps!</p>\n<h3>Golden image testing</h3>\n<p>The term “golden image” refers to a master image file that is considered the true rendering of a given widget, state, application, or other visual representation you have chosen to capture. In Flutter 1.12, we have implementations of the <a href=\"https://api.flutter.dev/flutter/flutter_test/GoldenFileComparator-class.html\">GoldenFileComparator</a> and <a href=\"https://api.flutter.dev/flutter/flutter_test/LocalFileComparator-class.html\">LocalFileComparator</a> classes that compare by pixels instead of bits, <a href=\"https://github.com/flutter/flutter/issues/30036\">eliminating false positives</a>. These new implementations highlight visual differences to make it clear when there are differences between your golden image and the updates under testing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/814/0*RfJiqYXXSujb8WCs\"></figure><p>In this case, it’s clear that the differences between the master and the test image are all in the border, making it much easier to track down the discrepancy.</p>\n<h3>Community</h3>\n<p>In addition to all of the work on Flutter and its associated tooling, the Flutter community continues to take Flutter into new and amazing directions! To see what developers in the community are doing, we’ve put together a little video.</p>\n<a href=\"https://medium.com/media/e392f1a410228fd35310a5028a5861cf/href\">https://medium.com/media/e392f1a410228fd35310a5028a5861cf/href</a><p>We’re so lucky to have such a great set of developers in the Flutter community. You make us all proud to be on the Flutter team!</p>\n<h3>Flutter Favorite packages</h3>\n<p>When we released Flutter 1.0 in December, 2018, there were about 1000 packages on pub.dev that supported Flutter and we thought that was a huge number. As of this writing, that number has increased by more than 6x. With that many options, it’s sometimes hard to know which packages to choose. The overall score on pub.dev helps as well as the new <a href=\"https://medium.com/dartlang/verified-publishers-98f05466558a\">Verified Publishers</a> feature. Now, pub.dev is getting <a href=\"http://go/dart-2.7-annoucement\">a rating system</a>, which should help even more.</p>\n<p>Still, our users have asked again and again for a set of “recommended” packages and plugins. With that in mind, we’re pleased to announce <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">the Flutter Favorite program</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8Q2gB989P4yclIqD\"></figure><p>A Flutter Favorite package (or plugin) is one that we think that you should consider first when building your app. The “we” in that sentence is the Flutter Ecosystem Committee, a group of regionally-diverse individuals picked from the Flutter team at Google and from the Flutter community at large to address issues across the Flutter ecosystem. Their first job was to establish a high quality bar and to identify an initial set of packages that met that quality bar. The authors of those packages are able to use the Flutter Favorite logo in their package documentation. Furthermore, pub.dev has been updated to show the logo in search results and other places.</p>\n<p>For details, see <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">the Flutter Favorite page on flutter.dev</a>. You can also see <a href=\"https://pub.dev/flutter/favorites\">the complete list of Flutter Favorite packages on pub.dev</a>. The bottom line is that if you’re an app developer and you see that logo, you should have confidence in that package. If you’re a package author and you’ve been awarded the Flutter Favorite logo, thank you for your contribution to the Flutter ecosystem.</p>\n<h3>Community tools</h3>\n<p>And speaking of contributions to be proud of, the Flutter community at large has been building a number of excellent tools as well; here’s just a selection.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mCfvSsh_GZmW2xYn\"><figcaption><a href=\"https://github.com/aloisdeniel/flutter_device_preview\">Flutter Device Preview</a></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ArEfmlujiPiVUD1v\"><figcaption><a href=\"https://www.widgetmaker.dev/\">Widget Maker</a></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vJh-yghl3kJJdW0ZakbSzg.png\"><figcaption><a href=\"https://rxlabz.github.io/panache/#/\">Panache</a></figcaption></figure><h3>Featured tooling partner: Nevercode</h3>\n<p>In addition to a great set of community tools, the Flutter ecosystem has a great set of tooling partners as well. One notable partner has always been Nevercode, who have a whole new set of features in their latest release, including <a href=\"https://marketplace.visualstudio.com/items?itemName=codemagic.remote-mac\">a Visual Studio Code plugin called Remote Mac</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cmfHUry8I1ztX80M\"></figure><p>The Remote Mac extension lets you connect directly to a Mac that they’ve hosted in the cloud for purposes of testing your iOS and macOS Flutter code. For more details about Nevercode’s latest release, including new support for Flutter on the web and on macOS, new enterprise features and more, check out <a href=\"https://blog.codemagic.io/more-professional-capable-accessible/\">their newest blog post</a>.</p>\n<p>To see the progress being made by our other tooling partners, you should definitely <a href=\"https://developers.googleblog.com/2019/12/flutter-ui-ambient-computing.html\">check out what Supernova, Rive and Adobe are up to in their latest releases</a>.</p>\n<h3>Conclusion</h3>\n<p>This has definitely been a big year for Flutter and v1.12 is a big release. This blog post has been a whirlwind tour of what’s new in this release; if you’d like to check on your favorite pull release, see where we’ve been spending our time in this release by how many pull releases in each area or see what we broke, then we recommend <a href=\"https://flutter.dev/docs/development/tools/sdk/release-notes/release-notes-1.12.13\">the Flutter 1.12 Release Notes</a>.</p>\n<p>We hope you agree that Flutter is moving in the right direction and picking up speed. With all of these new features and new tools, where do you want your app to run today?</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=22c256ba525d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/announcing-flutter-1-12-what-a-year-22c256ba525d\">Announcing Flutter 1.12: What a year!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "mobile-app-development",
                "web-development",
                "desktop-app",
                "flutter"
            ]
        },
        {
            "title": "Web support for Flutter goes beta",
            "pubDate": "2019-12-11 15:09:15",
            "link": "https://medium.com/flutter/web-support-for-flutter-goes-beta-35b64a1217c0?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/35b64a1217c0",
            "author": "Mariam Hasnany",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*E9vaDY0XLc4dCR2J",
            "description": "\n<p><em>Posted by Mariam Hasnany, Product Manager, Flutter</em></p>\n<p>We’re pleased to announce that web support for Flutter is now in beta!</p>\n<h3>Why did we bring Flutter to the web?</h3>\n<p>Developers build apps that need to run both on mobile and web. It’s important to us that you can design and build what you want, and know that with Flutter it will work beautifully anywhere you need. As a developer, learning a single set of skills that can easily transfer across multiple platforms is desirable. Web support for Flutter enables developers to use the same code, ship features faster, and ensure consistency for their experiences across devices. Additionally, a powerful Dart compiler for the web and a Flutter architecture that is designed with portability in mind makes it easier to create delightful interactive web experiences using Flutter.</p>\n<h3>More than a preview</h3>\n<p>Since releasing web support as a <a href=\"https://medium.com/flutter/bringing-flutter-to-the-web-904de05f0df0\">tech preview</a> at Google I/O this year, and the start of the <a href=\"https://medium.com/flutter/flutter-for-web-early-adopter-program-now-open-9f1fb146e4c4\">early adopter program</a> in July, we’ve been working hard to support the growing interest in extending Flutter’s web support both at Google and in the wider public.</p>\n<h4>So, what does beta for web mean?</h4>\n<p>With the Flutter 1.12 release, Flutter’s web support graduates from technical preview to beta. When you’re on the beta channel and have enabled web support, creating a new Flutter project not only includes Android and iOS host apps, but now also includes a web/ directory that contains everything you need to compile and run the same project code in a browser.</p>\n<p>We believe Flutter’s web support is starting to stabilize and is ready for more adventurous developers to start using for a number of scenarios. As we move into this next stage of development, we will continue to make changes and improve accessibility, test coverage, and more.</p>\n<h3>Scenarios to try</h3>\n<p>As we’ve been developing Flutter’s support for running on the web, we have particularly focused on a number of scenarios that we think are well suited for the characteristics of Flutter. We believe that our feature set is complete enough to enable developers to build rich, interactive web experiences. While working with our early adopter partners, we have been validating and refining support for the following scenarios.</p>\n<p><strong>Connected, standalone app</strong></p>\n<p>Flutter can enable developers to build a single app from the same code across both mobile and browser experiences. <a href=\"https://startyourjourney.io/\">Journey</a>, one of our early adopters, used Flutter to build an app across multiple platforms.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*E9vaDY0XLc4dCR2J\"><figcaption>Journey, a social app, recently launched a cross-platform app using Flutter</figcaption></figure><p>Luke O’Brien, Founder of Journey, states “<em>Four months ago I was about to build Journey for Android-only for the MVP. I discovered Flutter and thought, ‘This is too good to be true’, but decided to run with it. It has been the best decision I have made to date. Flutter has cut development time in half (probably more than half) and we’ve now launched across Android, iOS, and web — doubling user-growth potential. It’s difficult to overstate the impact Flutter has had in turning my vision into reality.’</em></p>\n<p><strong>Embedded interactive content</strong></p>\n<p>One scenario is embedding a rich, data-centric, mini app within a parent site; there is no need for navigation services or other app-like functionality. Embedding a new car configurator, a crossword puzzle, or interactive data visualizations into an existing website are just a few key examples that fit this scenario. Early adopter <a href=\"https://studio.aei.dev/showcase/\">AEI Studio’s showcase</a> of chatbots embedded Flutter within their web chat dialog showcasing animations, text input by keyboard, and more.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/399/0*M7sTluUPVsk6DcnU\"><figcaption>Weatherbot is one of AEI Studio’s chatbots that embed Flutter within their web chat dialog</figcaption></figure><p><strong>Lite apps</strong></p>\n<p>Even though Flutter’s custom mobile runtime is still able to provide a smoother experience today, sometimes the friction of app installation impedes users from getting started. An existing Flutter app that has a lightweight web experience gives companies the best of both worlds. Although the primary consumption of the app would be on mobile, a lite web app could provide a less feature rich experience with related functionality using the same tools, frameworks, UI components, and business logic.</p>\n<p><strong>Companion apps</strong></p>\n<p>A companion app is a web experience built using Flutter to support your primary consumption mobile app. For example, using Flutter to build a web app that enables admins or internal users to create content or manage the backend for your existing Flutter mobile app. Although this web app is considered a separate experience, it can leverage much of the same code from the mobile app.</p>\n<h3>Plugins are here!</h3>\n<p>Flutter has a concept of plugins, which allows you to talk to native libraries for the platform you are running on. When running your Flutter app on the web, you can get full access to existing JS libraries. We do all the JS-interop code behind the scenes so the plugin works as you’d expect on both mobile and web. We’ve already implemented a handful of the top-requested plugins so they work consistently across your native and web applications. Now, you can also <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">write your own plugins</a> as <a href=\"https://github.com/cbenhagen\">Ben Hagan</a> did for video_player, and <a href=\"https://github.com/lejard-h\">Hadrien Lejard</a> did for the sentry package<em>.</em> The following packages are updated:</p>\n<ul>\n<li><a href=\"https://pub.dev/packages/shared_preferences\">shared_preferences</a></li>\n<li><a href=\"https://pub.dev/packages/firebase_core\">firebase_core</a></li>\n<li><a href=\"https://pub.dev/packages/firebase_auth\">firebase_auth</a></li>\n<li><a href=\"https://pub.dev/packages/google_sign_in\">google_sign_in</a></li>\n<li><a href=\"https://pub.dev/packages/google_sign_in\">url_launcher</a></li>\n<li><a href=\"https://pub.dev/packages/video_player\">video_player</a></li>\n<li><a href=\"https://pub.dev/packages/sentry\">sentry</a></li>\n</ul>\n<p>We have also added new platform tagging and filtering on the pub.dev package repository.</p>\n<p>First, on a package detail page, we list which platforms the package supports. This makes it easy to identify if a package has web support.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5vkz66kMYk5DTfSS\"><figcaption><em>pub.dev package detail page showing SDK and platform compatibility tags</em></figcaption></figure><p>The search UI also has new filters, so you can find packages that have web support. This is based on the new <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin-platforms\">platform manifest tags</a> that are now available in Flutter 1.12.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/671/0*QApzX3FOYgAGCFRK\"><figcaption><em>pub.dev search UI showing SDK and platform filter support</em></figcaption></figure><h3>Road to stable</h3>\n<p>We made a lot of progress with beta, but we still have a lot of work to do. Our performance work is not complete and we are working on broadening our scope for accessibility, browser compatibility and more.</p>\n<p><strong>Accessibility</strong></p>\n<p>We have accessibility support on mobile browsers through TalkBack on Android and VoiceOver on iOS. Some of the features that are already implemented for assistive technologies across platforms include things like UI traversal and traversal order, UI interaction cues like tappable, labels, editable, incremental, image, live region, and checkable.<em> </em>And, we’re working on adding screen reader support for desktop web browsers.</p>\n<p><strong>Browser support</strong></p>\n<p>As Flutter evolves from a mobile-only framework to also covering desktop ux idioms, Flutter’s support for desktop web browsers will improve and feel more seamless. We plan to support and test for Chrome, Edge, Firefox, and Safari on desktop and mobile browsers.</p>\n<p><strong>Test coverage</strong></p>\n<p>Since the preview, we increased our test coverage both on the framework and on the Flutter web engine. As of today, we run automated tests on Chrome, and we manually test Safari. There is still more testing work to do, and regressions may crop up in untested scenarios.</p>\n<h3>Try Flutter’s web support, contribute, and share!</h3>\n<p>Now is the perfect time to try Flutter’s web support! Go to flutter.dev/web to get started, and find examples, documentation, and more. If you’ve already experimented with Flutter’s web support, you can <a href=\"https://github.com/flutter/flutter/wiki/Flutter-build-release-channels\">switch to the beta channel</a>.</p>\n<p>There are over 1800 Flutter plugins that exist today; however, most are for iOS or Android. You can help bridge the gap between mobile and web by adding web support to existing plugins or by building your own. To help guide you, we published an article about <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">how to write a web plugin</a>.</p>\n<h3>Closing thoughts</h3>\n<p>We hope that you are excited about Flutter’s web support advancing to the beta channel, and feel our commitment as we get closer to a production-quality release of web support.</p>\n<p>We <a href=\"https://flutter.io/support/\">welcome feedback</a>, and hope that you share what you’re working on using #Flutter. We truly enjoy seeing how you use Flutter to build beautiful, interactive web experiences!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=35b64a1217c0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/web-support-for-flutter-goes-beta-35b64a1217c0\">Web support for Flutter goes beta</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p><em>Posted by Mariam Hasnany, Product Manager, Flutter</em></p>\n<p>We’re pleased to announce that web support for Flutter is now in beta!</p>\n<h3>Why did we bring Flutter to the web?</h3>\n<p>Developers build apps that need to run both on mobile and web. It’s important to us that you can design and build what you want, and know that with Flutter it will work beautifully anywhere you need. As a developer, learning a single set of skills that can easily transfer across multiple platforms is desirable. Web support for Flutter enables developers to use the same code, ship features faster, and ensure consistency for their experiences across devices. Additionally, a powerful Dart compiler for the web and a Flutter architecture that is designed with portability in mind makes it easier to create delightful interactive web experiences using Flutter.</p>\n<h3>More than a preview</h3>\n<p>Since releasing web support as a <a href=\"https://medium.com/flutter/bringing-flutter-to-the-web-904de05f0df0\">tech preview</a> at Google I/O this year, and the start of the <a href=\"https://medium.com/flutter/flutter-for-web-early-adopter-program-now-open-9f1fb146e4c4\">early adopter program</a> in July, we’ve been working hard to support the growing interest in extending Flutter’s web support both at Google and in the wider public.</p>\n<h4>So, what does beta for web mean?</h4>\n<p>With the Flutter 1.12 release, Flutter’s web support graduates from technical preview to beta. When you’re on the beta channel and have enabled web support, creating a new Flutter project not only includes Android and iOS host apps, but now also includes a web/ directory that contains everything you need to compile and run the same project code in a browser.</p>\n<p>We believe Flutter’s web support is starting to stabilize and is ready for more adventurous developers to start using for a number of scenarios. As we move into this next stage of development, we will continue to make changes and improve accessibility, test coverage, and more.</p>\n<h3>Scenarios to try</h3>\n<p>As we’ve been developing Flutter’s support for running on the web, we have particularly focused on a number of scenarios that we think are well suited for the characteristics of Flutter. We believe that our feature set is complete enough to enable developers to build rich, interactive web experiences. While working with our early adopter partners, we have been validating and refining support for the following scenarios.</p>\n<p><strong>Connected, standalone app</strong></p>\n<p>Flutter can enable developers to build a single app from the same code across both mobile and browser experiences. <a href=\"https://startyourjourney.io/\">Journey</a>, one of our early adopters, used Flutter to build an app across multiple platforms.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*E9vaDY0XLc4dCR2J\"><figcaption>Journey, a social app, recently launched a cross-platform app using Flutter</figcaption></figure><p>Luke O’Brien, Founder of Journey, states “<em>Four months ago I was about to build Journey for Android-only for the MVP. I discovered Flutter and thought, ‘This is too good to be true’, but decided to run with it. It has been the best decision I have made to date. Flutter has cut development time in half (probably more than half) and we’ve now launched across Android, iOS, and web — doubling user-growth potential. It’s difficult to overstate the impact Flutter has had in turning my vision into reality.’</em></p>\n<p><strong>Embedded interactive content</strong></p>\n<p>One scenario is embedding a rich, data-centric, mini app within a parent site; there is no need for navigation services or other app-like functionality. Embedding a new car configurator, a crossword puzzle, or interactive data visualizations into an existing website are just a few key examples that fit this scenario. Early adopter <a href=\"https://studio.aei.dev/showcase/\">AEI Studio’s showcase</a> of chatbots embedded Flutter within their web chat dialog showcasing animations, text input by keyboard, and more.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/399/0*M7sTluUPVsk6DcnU\"><figcaption>Weatherbot is one of AEI Studio’s chatbots that embed Flutter within their web chat dialog</figcaption></figure><p><strong>Lite apps</strong></p>\n<p>Even though Flutter’s custom mobile runtime is still able to provide a smoother experience today, sometimes the friction of app installation impedes users from getting started. An existing Flutter app that has a lightweight web experience gives companies the best of both worlds. Although the primary consumption of the app would be on mobile, a lite web app could provide a less feature rich experience with related functionality using the same tools, frameworks, UI components, and business logic.</p>\n<p><strong>Companion apps</strong></p>\n<p>A companion app is a web experience built using Flutter to support your primary consumption mobile app. For example, using Flutter to build a web app that enables admins or internal users to create content or manage the backend for your existing Flutter mobile app. Although this web app is considered a separate experience, it can leverage much of the same code from the mobile app.</p>\n<h3>Plugins are here!</h3>\n<p>Flutter has a concept of plugins, which allows you to talk to native libraries for the platform you are running on. When running your Flutter app on the web, you can get full access to existing JS libraries. We do all the JS-interop code behind the scenes so the plugin works as you’d expect on both mobile and web. We’ve already implemented a handful of the top-requested plugins so they work consistently across your native and web applications. Now, you can also <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">write your own plugins</a> as <a href=\"https://github.com/cbenhagen\">Ben Hagan</a> did for video_player, and <a href=\"https://github.com/lejard-h\">Hadrien Lejard</a> did for the sentry package<em>.</em> The following packages are updated:</p>\n<ul>\n<li><a href=\"https://pub.dev/packages/shared_preferences\">shared_preferences</a></li>\n<li><a href=\"https://pub.dev/packages/firebase_core\">firebase_core</a></li>\n<li><a href=\"https://pub.dev/packages/firebase_auth\">firebase_auth</a></li>\n<li><a href=\"https://pub.dev/packages/google_sign_in\">google_sign_in</a></li>\n<li><a href=\"https://pub.dev/packages/google_sign_in\">url_launcher</a></li>\n<li><a href=\"https://pub.dev/packages/video_player\">video_player</a></li>\n<li><a href=\"https://pub.dev/packages/sentry\">sentry</a></li>\n</ul>\n<p>We have also added new platform tagging and filtering on the pub.dev package repository.</p>\n<p>First, on a package detail page, we list which platforms the package supports. This makes it easy to identify if a package has web support.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5vkz66kMYk5DTfSS\"><figcaption><em>pub.dev package detail page showing SDK and platform compatibility tags</em></figcaption></figure><p>The search UI also has new filters, so you can find packages that have web support. This is based on the new <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin-platforms\">platform manifest tags</a> that are now available in Flutter 1.12.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/671/0*QApzX3FOYgAGCFRK\"><figcaption><em>pub.dev search UI showing SDK and platform filter support</em></figcaption></figure><h3>Road to stable</h3>\n<p>We made a lot of progress with beta, but we still have a lot of work to do. Our performance work is not complete and we are working on broadening our scope for accessibility, browser compatibility and more.</p>\n<p><strong>Accessibility</strong></p>\n<p>We have accessibility support on mobile browsers through TalkBack on Android and VoiceOver on iOS. Some of the features that are already implemented for assistive technologies across platforms include things like UI traversal and traversal order, UI interaction cues like tappable, labels, editable, incremental, image, live region, and checkable.<em> </em>And, we’re working on adding screen reader support for desktop web browsers.</p>\n<p><strong>Browser support</strong></p>\n<p>As Flutter evolves from a mobile-only framework to also covering desktop ux idioms, Flutter’s support for desktop web browsers will improve and feel more seamless. We plan to support and test for Chrome, Edge, Firefox, and Safari on desktop and mobile browsers.</p>\n<p><strong>Test coverage</strong></p>\n<p>Since the preview, we increased our test coverage both on the framework and on the Flutter web engine. As of today, we run automated tests on Chrome, and we manually test Safari. There is still more testing work to do, and regressions may crop up in untested scenarios.</p>\n<h3>Try Flutter’s web support, contribute, and share!</h3>\n<p>Now is the perfect time to try Flutter’s web support! Go to flutter.dev/web to get started, and find examples, documentation, and more. If you’ve already experimented with Flutter’s web support, you can <a href=\"https://github.com/flutter/flutter/wiki/Flutter-build-release-channels\">switch to the beta channel</a>.</p>\n<p>There are over 1800 Flutter plugins that exist today; however, most are for iOS or Android. You can help bridge the gap between mobile and web by adding web support to existing plugins or by building your own. To help guide you, we published an article about <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">how to write a web plugin</a>.</p>\n<h3>Closing thoughts</h3>\n<p>We hope that you are excited about Flutter’s web support advancing to the beta channel, and feel our commitment as we get closer to a production-quality release of web support.</p>\n<p>We <a href=\"https://flutter.io/support/\">welcome feedback</a>, and hope that you share what you’re working on using #Flutter. We truly enjoy seeing how you use Flutter to build beautiful, interactive web experiences!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=35b64a1217c0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/web-support-for-flutter-goes-beta-35b64a1217c0\">Web support for Flutter goes beta</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web-development",
                "flutter-web",
                "flutter",
                "beta"
            ]
        },
        {
            "title": "Flutter animation basics with implicit animations",
            "pubDate": "2019-12-04 00:28:32",
            "link": "https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/95db481c5916",
            "author": "Alethea K. Flowers",
            "thumbnail": "https://cdn-images-1.medium.com/max/600/0*8lW_z0nxESDIBO9R",
            "description": "\n<p>In this series of posts, we’re going to introduce you to animations in Flutter, and show you how to build both simple and complex animations for your Flutter app.</p>\n<p><em>This post is also available as a </em><a href=\"https://www.youtube.com/watch?v=IVTjpW3W33s\"><em>video</em></a><em>, if you prefer.</em></p>\n<p>In this first post, we’re going to focus on the most straightforward way to add animations to your app. You don’t have to be an expert on animations or animation terminology to add animations to your app. Along the way, we’ll introduce some widgets and terminology that will help you get started with animations right away and give you some background for the rest of the posts in the series.</p>\n<h3>Implicitly animated widgets</h3>\n<p>Flutter includes a series of widgets that are animated versions of existing widgets that you probably already used in your app, such as the <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html\">AnimatedContainer</a> version of the <a href=\"https://api.flutter.dev/flutter/widgets/Container-class.html\">Container</a> widget and the <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedPositioned-class.html\">AnimatedPositioned</a> version of the <a href=\"https://api.flutter.dev/flutter/widgets/Positioned-class.html\">Positioned</a> widget.</p>\n<p>These widgets automatically animate changes to their properties. When you rebuild the widget with new property values, such as with a <a href=\"https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html\">StatefulWidget</a>’s setState, the widget handles driving the animation from the previous value to the new value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*8lW_z0nxESDIBO9R\"><figcaption>A screen recording where the code for an app is modified and the application animates the size of a star widget.</figcaption></figure><p>These widgets are called <a href=\"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget-class.html\">Implicitly Animated Widgets</a>. They are typically the first thing you reach for when you need to add animations to your app. They provide a way to add animations without adding additional complexity.</p>\n<h3>The AnimatedContainer widget</h3>\n<p>Let’s look a little closer at how you can use one of these implicitly animated widgets to add some animation to your app.</p>\n<p>In this app, there is a container and a button. When the button is pressed, setState is called, and the container is rebuilt with a new value for width. Notice that the container changes its width immediately, without any animation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*TRpN2WHDqNJtk7vI\"><figcaption>The star gets bigger instantly, with no animation between its states.</figcaption></figure><pre><a href=\"http://twitter.com/override\">@override</a><br>Widget build(BuildContext context) {<br>  return Column(<br>    mainAxisAlignment: MainAxisAlignment.center,<br>    children: &lt;Widget&gt;[<br>      Container(<br>        width: _bigger ? 100 : 500,<br>        child: Image.asset('assets/star.png'),<br>      ),<br>      RaisedButton(<br>        onPressed: () =&gt; setState(() {<br>          _bigger = !_bigger;<br>        }),<br>        child: Icon(Icons.star),<br>      ),<br>    ],<br>  );<br>}</pre>\n<p>We can add some animation to this app by switching the Container widget for an AnimatedContainer widget and specifying an animation duration.</p>\n<pre>AnimatedContainer(<br>  width: _bigger ? 100 : 500,<br>  child: Image.asset('assets/star.png'),<br>  duration: Duration(seconds: 1),<br>),</pre>\n<p>Now, when the button is pressed, the container gradually animates from the previous width value to the new value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*VdFcZ_eCsnJnJXb-\"><figcaption>The star now animates between its states</figcaption></figure><p>The process of animating through the values between the old and new value is called <a href=\"https://en.wikipedia.org/wiki/Interpolation\">interpolation</a>. The AnimatedContainer handles interpolating its properties between the old and the new values whenever they change.</p>\n<p>This applies to all of the AnimatedContainer’s properties, including, for example, the <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedContainer/decoration.html\">decoration</a>. We can modify the gradient within a decoration and the AnimatedContainer handles interpolating between the old and new gradient:</p>\n<pre>AnimatedContainer(<br>  decoration: BoxDecoration(<br>    gradient: RadialGradient(<br>      colors: [Colors.purple, Colors.transparent],<br>      stops: [ _bigger ? 0.2 : 0.5, 1.0])<br>  ),<br>),</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*k-sSbKs-rCvbxB1a\"><figcaption>The star now has an animated gradient</figcaption></figure><h3>Controlling the animation with duration and curves</h3>\n<p>Implicitly animated widgets like AnimatedContainer have two properties that you can use to control the animation’s behavior. You can control how long it takes to interpolate to the new value by setting the <a href=\"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget/duration.html\">duration</a> property.</p>\n<pre>AnimatedContainer(<br>  width: _bigger ? 100 : 500,<br>  child: Image.asset('assets/star.png'),<br>  duration: Duration(seconds: 5),<br>),</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*wGVszwaj9kdJlOsS\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*1g6d0g2ruUw0ZNBb\"><figcaption>Faster on the left, slower on the right</figcaption></figure><p>In this example, we made the animation take a much longer amount of time.</p>\n<p>You can also control the way the widget interpolates from the old to the new value by using a <a href=\"https://api.flutter.dev/flutter/animation/Curve-class.html\">Curve</a>. Curves control the rate of change over time and can help your animations feel more realistic. In this example, we changed the curve from the default linear curve to a more exaggerated quintic curve:</p>\n<pre>AnimatedContainer(<br>  width: _bigger ? 100 : 500,<br>  child: Image.asset('assets/star.png'),<br>  duration: Duration(seconds: 1),<br>  curve: Curves.easeInOutQuint,<br>),</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*UySYHB5By2kX9P_6\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*_8Ynon8NQu4zB3B7\"><figcaption>Linear on the left, quintic on the right</figcaption></figure><p>There are many different <a href=\"https://api.flutter.dev/flutter/animation/Curves-class.html\">built-in Curves</a> available to give your animations a bit of character, and you can also define your own custom curves. Curves can even be discontinuous, like the <a href=\"https://api.flutter.dev/flutter/animation/SawTooth-class.html\">SawTooth</a> curve.</p>\n<p>Here’s an example of a custom curve called SineCurve that uses the sine function to make a curve that bounces:</p>\n<pre>class SineCurve extends Curve {<br>  final double count;<br><br>  SineCurve({this.count = 1});<br><br><a href=\"http://twitter.com/override\">@override</a><br>  double transformInternal(double t) {<br>    return sin(count * 2 * pi * t) * 0.5 + 0.5;<br>  }<br>}</pre>\n<p>Here, SineCurve makes the star bounce up and down:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*eouqer3J3CQE-fO4\"><figcaption>Now that is a happy star</figcaption></figure><h3>To recap</h3>\n<p>Flutter provides implicitly animated widgets that are animated versions of common widgets. You can control the way these widgets animate using durations and curves.</p>\n<p>AnimatedContainer is one notably powerful implicitly animated widget because it has many properties that affect its appearance, and all of them are automatically interpolated.</p>\n<p>All of the other implicitly animated widgets are also powerful, easy-to-use options for adding animations without adding a lot of complexity.</p>\n<p>Also, you don’t necessarily need to place these widgets into a StatefulWidget and use setState, you can use <a href=\"https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html\">StreamBuilder</a> and <a href=\"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html\">FutureBuilder</a> to trigger animations like in <a href=\"https://gist.github.com/theacodes/98255cd57845731449582e12b132ed6d\">this example</a>.</p>\n<h3>Digging deeper into animations</h3>\n<p>Implicitly animated widgets are your first choice for adding animations, however, this isn’t all that Flutter’s animation system has to offer. In the rest of this series, we explore the lower layers of the Flutter animation system, and show you how you can build advanced animations by using the animation system directly.</p>\n<p>For everything else, visit <a href=\"https://flutter.dev/\">flutter.dev</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=95db481c5916\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter animation basics with implicit animations</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>In this series of posts, we’re going to introduce you to animations in Flutter, and show you how to build both simple and complex animations for your Flutter app.</p>\n<p><em>This post is also available as a </em><a href=\"https://www.youtube.com/watch?v=IVTjpW3W33s\"><em>video</em></a><em>, if you prefer.</em></p>\n<p>In this first post, we’re going to focus on the most straightforward way to add animations to your app. You don’t have to be an expert on animations or animation terminology to add animations to your app. Along the way, we’ll introduce some widgets and terminology that will help you get started with animations right away and give you some background for the rest of the posts in the series.</p>\n<h3>Implicitly animated widgets</h3>\n<p>Flutter includes a series of widgets that are animated versions of existing widgets that you probably already used in your app, such as the <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html\">AnimatedContainer</a> version of the <a href=\"https://api.flutter.dev/flutter/widgets/Container-class.html\">Container</a> widget and the <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedPositioned-class.html\">AnimatedPositioned</a> version of the <a href=\"https://api.flutter.dev/flutter/widgets/Positioned-class.html\">Positioned</a> widget.</p>\n<p>These widgets automatically animate changes to their properties. When you rebuild the widget with new property values, such as with a <a href=\"https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html\">StatefulWidget</a>’s setState, the widget handles driving the animation from the previous value to the new value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*8lW_z0nxESDIBO9R\"><figcaption>A screen recording where the code for an app is modified and the application animates the size of a star widget.</figcaption></figure><p>These widgets are called <a href=\"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget-class.html\">Implicitly Animated Widgets</a>. They are typically the first thing you reach for when you need to add animations to your app. They provide a way to add animations without adding additional complexity.</p>\n<h3>The AnimatedContainer widget</h3>\n<p>Let’s look a little closer at how you can use one of these implicitly animated widgets to add some animation to your app.</p>\n<p>In this app, there is a container and a button. When the button is pressed, setState is called, and the container is rebuilt with a new value for width. Notice that the container changes its width immediately, without any animation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*TRpN2WHDqNJtk7vI\"><figcaption>The star gets bigger instantly, with no animation between its states.</figcaption></figure><pre><a href=\"http://twitter.com/override\">@override</a><br>Widget build(BuildContext context) {<br>  return Column(<br>    mainAxisAlignment: MainAxisAlignment.center,<br>    children: &lt;Widget&gt;[<br>      Container(<br>        width: _bigger ? 100 : 500,<br>        child: Image.asset('assets/star.png'),<br>      ),<br>      RaisedButton(<br>        onPressed: () =&gt; setState(() {<br>          _bigger = !_bigger;<br>        }),<br>        child: Icon(Icons.star),<br>      ),<br>    ],<br>  );<br>}</pre>\n<p>We can add some animation to this app by switching the Container widget for an AnimatedContainer widget and specifying an animation duration.</p>\n<pre>AnimatedContainer(<br>  width: _bigger ? 100 : 500,<br>  child: Image.asset('assets/star.png'),<br>  duration: Duration(seconds: 1),<br>),</pre>\n<p>Now, when the button is pressed, the container gradually animates from the previous width value to the new value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*VdFcZ_eCsnJnJXb-\"><figcaption>The star now animates between its states</figcaption></figure><p>The process of animating through the values between the old and new value is called <a href=\"https://en.wikipedia.org/wiki/Interpolation\">interpolation</a>. The AnimatedContainer handles interpolating its properties between the old and the new values whenever they change.</p>\n<p>This applies to all of the AnimatedContainer’s properties, including, for example, the <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedContainer/decoration.html\">decoration</a>. We can modify the gradient within a decoration and the AnimatedContainer handles interpolating between the old and new gradient:</p>\n<pre>AnimatedContainer(<br>  decoration: BoxDecoration(<br>    gradient: RadialGradient(<br>      colors: [Colors.purple, Colors.transparent],<br>      stops: [ _bigger ? 0.2 : 0.5, 1.0])<br>  ),<br>),</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*k-sSbKs-rCvbxB1a\"><figcaption>The star now has an animated gradient</figcaption></figure><h3>Controlling the animation with duration and curves</h3>\n<p>Implicitly animated widgets like AnimatedContainer have two properties that you can use to control the animation’s behavior. You can control how long it takes to interpolate to the new value by setting the <a href=\"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget/duration.html\">duration</a> property.</p>\n<pre>AnimatedContainer(<br>  width: _bigger ? 100 : 500,<br>  child: Image.asset('assets/star.png'),<br>  duration: Duration(seconds: 5),<br>),</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*wGVszwaj9kdJlOsS\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*1g6d0g2ruUw0ZNBb\"><figcaption>Faster on the left, slower on the right</figcaption></figure><p>In this example, we made the animation take a much longer amount of time.</p>\n<p>You can also control the way the widget interpolates from the old to the new value by using a <a href=\"https://api.flutter.dev/flutter/animation/Curve-class.html\">Curve</a>. Curves control the rate of change over time and can help your animations feel more realistic. In this example, we changed the curve from the default linear curve to a more exaggerated quintic curve:</p>\n<pre>AnimatedContainer(<br>  width: _bigger ? 100 : 500,<br>  child: Image.asset('assets/star.png'),<br>  duration: Duration(seconds: 1),<br>  curve: Curves.easeInOutQuint,<br>),</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*UySYHB5By2kX9P_6\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*_8Ynon8NQu4zB3B7\"><figcaption>Linear on the left, quintic on the right</figcaption></figure><p>There are many different <a href=\"https://api.flutter.dev/flutter/animation/Curves-class.html\">built-in Curves</a> available to give your animations a bit of character, and you can also define your own custom curves. Curves can even be discontinuous, like the <a href=\"https://api.flutter.dev/flutter/animation/SawTooth-class.html\">SawTooth</a> curve.</p>\n<p>Here’s an example of a custom curve called SineCurve that uses the sine function to make a curve that bounces:</p>\n<pre>class SineCurve extends Curve {<br>  final double count;<br><br>  SineCurve({this.count = 1});<br><br><a href=\"http://twitter.com/override\">@override</a><br>  double transformInternal(double t) {<br>    return sin(count * 2 * pi * t) * 0.5 + 0.5;<br>  }<br>}</pre>\n<p>Here, SineCurve makes the star bounce up and down:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*eouqer3J3CQE-fO4\"><figcaption>Now that is a happy star</figcaption></figure><h3>To recap</h3>\n<p>Flutter provides implicitly animated widgets that are animated versions of common widgets. You can control the way these widgets animate using durations and curves.</p>\n<p>AnimatedContainer is one notably powerful implicitly animated widget because it has many properties that affect its appearance, and all of them are automatically interpolated.</p>\n<p>All of the other implicitly animated widgets are also powerful, easy-to-use options for adding animations without adding a lot of complexity.</p>\n<p>Also, you don’t necessarily need to place these widgets into a StatefulWidget and use setState, you can use <a href=\"https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html\">StreamBuilder</a> and <a href=\"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html\">FutureBuilder</a> to trigger animations like in <a href=\"https://gist.github.com/theacodes/98255cd57845731449582e12b132ed6d\">this example</a>.</p>\n<h3>Digging deeper into animations</h3>\n<p>Implicitly animated widgets are your first choice for adding animations, however, this isn’t all that Flutter’s animation system has to offer. In the rest of this series, we explore the lower layers of the Flutter animation system, and show you how you can build advanced animations by using the animation system directly.</p>\n<p>For everything else, visit <a href=\"https://flutter.dev/\">flutter.dev</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=95db481c5916\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter animation basics with implicit animations</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "flutter",
                "beginners-guide",
                "animation",
                "design"
            ]
        },
        {
            "title": "Issues, Bugs, and Backlogs",
            "pubDate": "2019-11-25 17:12:55",
            "link": "https://medium.com/flutter/https-medium-com-flutter-issues-bugs-and-backlogs-5fb3adab5e25?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/5fb3adab5e25",
            "author": "kf6gpe",
            "thumbnail": "https://cdn-images-1.medium.com/max/616/1*D_MCtnl2h_spFgoORikDcA.png",
            "description": "\n<h4>Managing feedback in a large open source project like Flutter</h4>\n<p>The growth of Flutter as a community-driven open source project is an ongoing source of delight to us here at Google. Whether measured in <a href=\"https://twitter.com/timsneath/status/1189594253690691584\">popularity on GitHub</a>, number of <a href=\"https://www.reddit.com/r/FlutterDev/comments/dsnzbq/githubs_2019_octoverse_report_is_out_flutter_is/\">projects created</a>, or <a href=\"https://adtmag.com/articles/2019/03/29/linkedin-skills.aspx\">skills growth</a>, 2019 has been a defining year for the project, and we’re ever thankful to you all for your support and contributions to make Flutter the project it is. We build Flutter with you and for you, and we hope that comes across in everything we do.</p>\n<p>As we’ve grown, the number of issues we need to track grows, too! We use issues on GitHub in a variety of ways: not just to report bugs, but any unit of work pertaining to the project. Anyone can submit an issue, and these issues fall into a number of categories:</p>\n<ul>\n<li>Feature requests: things a user or a contributor wish that Flutter could do, or do better.</li>\n<li>Support issues: questions from users as to how Flutter works or how to do things. While these are better asked on Stack Overflow, many point to ways that we could improve our documentation, too.</li>\n<li>Bona fide defects: things that don’t work as they should. This includes serious issues like crashes and performance regressions, but also those pesky fit-and-finish bugs that are common in any large software system.</li>\n<li>Untriaged items that haven’t been examined and labeled.</li>\n</ul>\n<p>Thus, our issues aren’t just a collection of defects; they’re our backlog. Anything we think of that we may want to work on should be represented as an issue, appropriately labeled, so that as we plan our goals and milestones we have a place from which to start.</p>\n<p>Some projects use the number of open bugs as a proxy for gauging release quality, and classify bugs as either defects or issues. <a href=\"https://github.com/flutter/flutter/wiki/Issue-hygiene#issue-philosophy\">Flutter doesn’t do this; we choose to track bugs and issues the same way, in GitHub, keeping everything in the open</a>. As a result, there will always be far more things that we <em>could</em> be working on than we actually <em>are</em> working on. This is true for many healthy open-source projects; one need only look at others that have been around for a while such as <a href=\"https://github.com/tensorflow/tensorflow/issues\">Tensorflow</a>, <a href=\"https://bugs.chromium.org/p/chromium/issues/list\">Chrome</a>, <a href=\"https://github.com/dart-lang/sdk/issues\">Dart</a>, <a href=\"https://github.com/golang/go/issues\">Go</a>, or <a href=\"https://github.com/Microsoft/vscode/issues\">VSCode</a>.</p>\n<p>Nonetheless, we want to be sure that our incoming issues are well-labeled and do the necessary gardening work so that our issue database is an accurate reflection of our product status. To this end, we’ve engaged with the community: there are a number of volunteers helping us with our front-line triage, and we’re <a href=\"https://blog.codemagic.io/flutter-and-codemagic-join-forces-on-github/\">pleased to announce that we’ve partnered with Nevercode</a>, the providers of <a href=\"https://codemagic.io/\">Codemagic</a>, a leading CI/CD system for Flutter, to help us with our front-line triage as well.</p>\n<h3>The Lifecycle of an Issue</h3>\n<p>We welcome new issue submissions! Our issue triage process is described in <a href=\"https://github.com/flutter/flutter/wiki/Triage\">Guidelines for triage</a>. Here’s how it works in practice:</p>\n<p>An issue starts with you: a user of Flutter, or an open-source contributor. Once you file it (hopefully with a reproducible case if it’s a bug, or a clear outline of what you’re proposing and why, if it’s a feature request), it goes to <em>front-line triage</em>.</p>\n<p>In front-line triage, a community participant — perhaps a volunteer, perhaps someone at Nevercode, or an engineer working on Flutter — examines the issue you’ve filed, and asks several questions:</p>\n<ul>\n<li>Is it clearly defined?</li>\n<li>If a bug, does it have a reproducible case and enough to go on?</li>\n<li>If a feature enhancement, do we understand enough about what you’re asking for so that we can gauge its contribution to the platform?</li>\n<li>Does it duplicate a previously filed issue?</li>\n</ul>\n<p>As we do this, our front-line triage applies as many labels to the issue as we can. We use these labels in lots of ways, such as to establish relative priority, determine how to route an issue to a particular team, and whether to include the issue in an upcoming milestone. We use both GitHub queries and some custom tools to mine the issues for signals as to what the community is looking for and why.</p>\n<p>From there, it goes to <em>secondary triage</em>, where an assigned team looks at the issue, and asks questions such as how the issue fits with the current work that they’re doing, and when they can schedule the work for completion. Again, more labels may be added or changed, as the labels provide us with the best possible snapshots as to the work we want to do and who can do the work.</p>\n<p>Eventually, an engineer offers to work on the issue. Unlike many software projects, we generally don’t assign issues to contributors: whether a contributor works for Google or not, contributors offer to tackle issues, rather than get assigned issues from the backlog. By letting developers offer, we distribute load-balancing down to individual contributors; each contributor self-assigns only the issues they’re actively working on, and gives milestones to those issues so that we know when they’ll land on the master branch. Leads may ask particular people to work on issues, of course, but most of the time it’s just that: a request for help, not an ultimatum or an assignment.</p>\n<p>Once an issue has been completed to our satisfaction, it is closed. Often this includes a link to the pull request addressing the issue, but there are other reasons we close issues, including:</p>\n<ul>\n<li>Is this a request for support? We direct the reporter to a support channel such as the <a href=\"mailto:flutter-dev@googlegroups.com\">flutter-dev@googlegroups.com</a> mailing list, the <a href=\"https://reddit.com/r/flutterdev\">r/FlutterDev</a> Reddit, our Discord communities (<a href=\"https://discordapp.com/invite/N7Yshp4\">user chat</a>, <a href=\"https://github.com/flutter/flutter/wiki/Chat\">community chat</a> used primarily by contributors), or <a href=\"https://stackoverflow.com/tags/flutter\">Stack Overflow</a>.</li>\n<li>Is this a duplicate issue? Before closing, we link to the original issue, which also updates the original issue.</li>\n<li>Does the issue have enough information to reproduce, and have we been able to reproduce it? If not, odds are that we can’t do anything and will close the issue.</li>\n</ul>\n<h3>Our Progress Thus Far</h3>\n<p>As you can imagine, as our popularity has grown, so has the number of opened and closed issues for <a href=\"http://github.com/flutter/flutter\">github.com/flutter/flutter</a> (this contains all issues except those for the web site, which are logged at <a href=\"http://github.com/flutter/website\">github.com/flutter/website</a>):</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/616/1*D_MCtnl2h_spFgoORikDcA.png\"><figcaption>Closed vs. open bugs for month-ends since Jan-2018</figcaption></figure><p>Equally exciting is the number of issues <em>not</em> bearing a label corresponding to one of our secondary triage teams, such as <a href=\"https://github.com/flutter/flutter/labels/framework\">framework</a>, <a href=\"https://github.com/flutter/flutter/labels/engine\">engine</a>, or <a href=\"https://github.com/flutter/flutter/labels/plugin\">plugin</a>:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/615/1*9ZXPKWTBT01b_6zsFtundg.png\"><figcaption>Issues not labeled for secondary triage, Mar-2019-present</figcaption></figure><p>You can clearly see where we started to engage Nevercode in our triage process, first in early September, with great progress by mid-September as they got up to speed.</p>\n<p>This emphasis on triage reflects our goal: not to have zero <em>open</em> issues, but to have zero <em>unlabeled</em> issues to provide adequate signals from our community, so that we can best prioritize our work. As Flutter continues to grow in popularity, we expect to see continued growth in the number of open issues that require triage, many of which will be requests for new features from the community. We’ll continue to use labels to help us determine which are bugs that require immediate attention, which are bugs we can defer to our next beta or stable release, and which are new feature requests.</p>\n<h3>How You Can Help</h3>\n<p>You can help keep our issue database clean and tidy with actionable issues. When filing an issue, please consider the following :</p>\n<ul>\n<li>Don’t use GitHub for support. As part of our issue triage, we’re now closing requests for support that come up in GitHub, redirecting folks to better channels. In those channels you’ll likely find someone able to answer your question, and the questions and answers are easier for other users to find as well.</li>\n<li>Help with reproducible cases: if it’s your own issue, make sure you have one. Even if it’s not your issue, we’ll gladly take reproducible cases from you, too! Writing reproducible cases for bugs is a great way to start learning how to use Flutter with real-world examples.</li>\n<li>Update and upvote issues that are important to you.</li>\n<li>Contribute test cases to the Flutter repository. This is another way to get your feet wet using Flutter and join the community. It also helps us prevent regressions: while all new code is accompanied by test cases, we strive to increase our test coverage as a matter of good practice. If you’re interested in contributing in this way, you can take a look at issues with the <a href=\"https://github.com/flutter/flutter/labels/a%3A%20tests\">a: tests</a> label.</li>\n<li>Consider helping us triage issues that others have filed.</li>\n</ul>\n<p>We’re deeply appreciative of the support and trust you’ve given us in investing your time and application ideas with Flutter. We welcome community involvement, whether it be filing a bug or feature you’d like to see addressed, or creating a pull request to make Flutter the platform you want to work with. Thank you!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5fb3adab5e25\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/https-medium-com-flutter-issues-bugs-and-backlogs-5fb3adab5e25\">Issues, Bugs, and Backlogs</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Managing feedback in a large open source project like Flutter</h4>\n<p>The growth of Flutter as a community-driven open source project is an ongoing source of delight to us here at Google. Whether measured in <a href=\"https://twitter.com/timsneath/status/1189594253690691584\">popularity on GitHub</a>, number of <a href=\"https://www.reddit.com/r/FlutterDev/comments/dsnzbq/githubs_2019_octoverse_report_is_out_flutter_is/\">projects created</a>, or <a href=\"https://adtmag.com/articles/2019/03/29/linkedin-skills.aspx\">skills growth</a>, 2019 has been a defining year for the project, and we’re ever thankful to you all for your support and contributions to make Flutter the project it is. We build Flutter with you and for you, and we hope that comes across in everything we do.</p>\n<p>As we’ve grown, the number of issues we need to track grows, too! We use issues on GitHub in a variety of ways: not just to report bugs, but any unit of work pertaining to the project. Anyone can submit an issue, and these issues fall into a number of categories:</p>\n<ul>\n<li>Feature requests: things a user or a contributor wish that Flutter could do, or do better.</li>\n<li>Support issues: questions from users as to how Flutter works or how to do things. While these are better asked on Stack Overflow, many point to ways that we could improve our documentation, too.</li>\n<li>Bona fide defects: things that don’t work as they should. This includes serious issues like crashes and performance regressions, but also those pesky fit-and-finish bugs that are common in any large software system.</li>\n<li>Untriaged items that haven’t been examined and labeled.</li>\n</ul>\n<p>Thus, our issues aren’t just a collection of defects; they’re our backlog. Anything we think of that we may want to work on should be represented as an issue, appropriately labeled, so that as we plan our goals and milestones we have a place from which to start.</p>\n<p>Some projects use the number of open bugs as a proxy for gauging release quality, and classify bugs as either defects or issues. <a href=\"https://github.com/flutter/flutter/wiki/Issue-hygiene#issue-philosophy\">Flutter doesn’t do this; we choose to track bugs and issues the same way, in GitHub, keeping everything in the open</a>. As a result, there will always be far more things that we <em>could</em> be working on than we actually <em>are</em> working on. This is true for many healthy open-source projects; one need only look at others that have been around for a while such as <a href=\"https://github.com/tensorflow/tensorflow/issues\">Tensorflow</a>, <a href=\"https://bugs.chromium.org/p/chromium/issues/list\">Chrome</a>, <a href=\"https://github.com/dart-lang/sdk/issues\">Dart</a>, <a href=\"https://github.com/golang/go/issues\">Go</a>, or <a href=\"https://github.com/Microsoft/vscode/issues\">VSCode</a>.</p>\n<p>Nonetheless, we want to be sure that our incoming issues are well-labeled and do the necessary gardening work so that our issue database is an accurate reflection of our product status. To this end, we’ve engaged with the community: there are a number of volunteers helping us with our front-line triage, and we’re <a href=\"https://blog.codemagic.io/flutter-and-codemagic-join-forces-on-github/\">pleased to announce that we’ve partnered with Nevercode</a>, the providers of <a href=\"https://codemagic.io/\">Codemagic</a>, a leading CI/CD system for Flutter, to help us with our front-line triage as well.</p>\n<h3>The Lifecycle of an Issue</h3>\n<p>We welcome new issue submissions! Our issue triage process is described in <a href=\"https://github.com/flutter/flutter/wiki/Triage\">Guidelines for triage</a>. Here’s how it works in practice:</p>\n<p>An issue starts with you: a user of Flutter, or an open-source contributor. Once you file it (hopefully with a reproducible case if it’s a bug, or a clear outline of what you’re proposing and why, if it’s a feature request), it goes to <em>front-line triage</em>.</p>\n<p>In front-line triage, a community participant — perhaps a volunteer, perhaps someone at Nevercode, or an engineer working on Flutter — examines the issue you’ve filed, and asks several questions:</p>\n<ul>\n<li>Is it clearly defined?</li>\n<li>If a bug, does it have a reproducible case and enough to go on?</li>\n<li>If a feature enhancement, do we understand enough about what you’re asking for so that we can gauge its contribution to the platform?</li>\n<li>Does it duplicate a previously filed issue?</li>\n</ul>\n<p>As we do this, our front-line triage applies as many labels to the issue as we can. We use these labels in lots of ways, such as to establish relative priority, determine how to route an issue to a particular team, and whether to include the issue in an upcoming milestone. We use both GitHub queries and some custom tools to mine the issues for signals as to what the community is looking for and why.</p>\n<p>From there, it goes to <em>secondary triage</em>, where an assigned team looks at the issue, and asks questions such as how the issue fits with the current work that they’re doing, and when they can schedule the work for completion. Again, more labels may be added or changed, as the labels provide us with the best possible snapshots as to the work we want to do and who can do the work.</p>\n<p>Eventually, an engineer offers to work on the issue. Unlike many software projects, we generally don’t assign issues to contributors: whether a contributor works for Google or not, contributors offer to tackle issues, rather than get assigned issues from the backlog. By letting developers offer, we distribute load-balancing down to individual contributors; each contributor self-assigns only the issues they’re actively working on, and gives milestones to those issues so that we know when they’ll land on the master branch. Leads may ask particular people to work on issues, of course, but most of the time it’s just that: a request for help, not an ultimatum or an assignment.</p>\n<p>Once an issue has been completed to our satisfaction, it is closed. Often this includes a link to the pull request addressing the issue, but there are other reasons we close issues, including:</p>\n<ul>\n<li>Is this a request for support? We direct the reporter to a support channel such as the <a href=\"mailto:flutter-dev@googlegroups.com\">flutter-dev@googlegroups.com</a> mailing list, the <a href=\"https://reddit.com/r/flutterdev\">r/FlutterDev</a> Reddit, our Discord communities (<a href=\"https://discordapp.com/invite/N7Yshp4\">user chat</a>, <a href=\"https://github.com/flutter/flutter/wiki/Chat\">community chat</a> used primarily by contributors), or <a href=\"https://stackoverflow.com/tags/flutter\">Stack Overflow</a>.</li>\n<li>Is this a duplicate issue? Before closing, we link to the original issue, which also updates the original issue.</li>\n<li>Does the issue have enough information to reproduce, and have we been able to reproduce it? If not, odds are that we can’t do anything and will close the issue.</li>\n</ul>\n<h3>Our Progress Thus Far</h3>\n<p>As you can imagine, as our popularity has grown, so has the number of opened and closed issues for <a href=\"http://github.com/flutter/flutter\">github.com/flutter/flutter</a> (this contains all issues except those for the web site, which are logged at <a href=\"http://github.com/flutter/website\">github.com/flutter/website</a>):</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/616/1*D_MCtnl2h_spFgoORikDcA.png\"><figcaption>Closed vs. open bugs for month-ends since Jan-2018</figcaption></figure><p>Equally exciting is the number of issues <em>not</em> bearing a label corresponding to one of our secondary triage teams, such as <a href=\"https://github.com/flutter/flutter/labels/framework\">framework</a>, <a href=\"https://github.com/flutter/flutter/labels/engine\">engine</a>, or <a href=\"https://github.com/flutter/flutter/labels/plugin\">plugin</a>:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/615/1*9ZXPKWTBT01b_6zsFtundg.png\"><figcaption>Issues not labeled for secondary triage, Mar-2019-present</figcaption></figure><p>You can clearly see where we started to engage Nevercode in our triage process, first in early September, with great progress by mid-September as they got up to speed.</p>\n<p>This emphasis on triage reflects our goal: not to have zero <em>open</em> issues, but to have zero <em>unlabeled</em> issues to provide adequate signals from our community, so that we can best prioritize our work. As Flutter continues to grow in popularity, we expect to see continued growth in the number of open issues that require triage, many of which will be requests for new features from the community. We’ll continue to use labels to help us determine which are bugs that require immediate attention, which are bugs we can defer to our next beta or stable release, and which are new feature requests.</p>\n<h3>How You Can Help</h3>\n<p>You can help keep our issue database clean and tidy with actionable issues. When filing an issue, please consider the following :</p>\n<ul>\n<li>Don’t use GitHub for support. As part of our issue triage, we’re now closing requests for support that come up in GitHub, redirecting folks to better channels. In those channels you’ll likely find someone able to answer your question, and the questions and answers are easier for other users to find as well.</li>\n<li>Help with reproducible cases: if it’s your own issue, make sure you have one. Even if it’s not your issue, we’ll gladly take reproducible cases from you, too! Writing reproducible cases for bugs is a great way to start learning how to use Flutter with real-world examples.</li>\n<li>Update and upvote issues that are important to you.</li>\n<li>Contribute test cases to the Flutter repository. This is another way to get your feet wet using Flutter and join the community. It also helps us prevent regressions: while all new code is accompanied by test cases, we strive to increase our test coverage as a matter of good practice. If you’re interested in contributing in this way, you can take a look at issues with the <a href=\"https://github.com/flutter/flutter/labels/a%3A%20tests\">a: tests</a> label.</li>\n<li>Consider helping us triage issues that others have filed.</li>\n</ul>\n<p>We’re deeply appreciative of the support and trust you’ve given us in investing your time and application ideas with Flutter. We welcome community involvement, whether it be filing a bug or feature you’d like to see addressed, or creating a pull request to make Flutter the platform you want to work with. Thank you!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5fb3adab5e25\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/https-medium-com-flutter-issues-bugs-and-backlogs-5fb3adab5e25\">Issues, Bugs, and Backlogs</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "open-source",
                "issues",
                "bugs",
                "feature-request",
                "flutter"
            ]
        },
        {
            "title": "How to Write a Flutter Web Plugin",
            "pubDate": "2019-11-20 23:56:27",
            "link": "https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/5e26c689ea1",
            "author": "Harry Terkelsen",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*UTowUOvpkFW35rcuJ3Lf1w.png",
            "description": "\n<h3>Introduction</h3>\n<p>Do you want to add support for a Flutter plugin? This article will show you how web support was added to the <a href=\"https://pub.dev/packages/url_launcher\">url_launcher</a> plugin. Before you read this article, you should already be familiar with plugin development and the concepts in <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin\">Developing plugin packages</a>.</p>\n<h3>Example: package:url_launcher</h3>\n<p>First, let’s create an example app that uses package:url_launcher, so you can verify that it works correctly.</p>\n<p><strong>Setup</strong></p>\n<p>In order to use web plugins, you need to be on the Flutter dev channel. Make sure that you’re on the dev channel by running:</p>\n<pre>$ flutter channel dev<br>$ flutter upgrade</pre>\n<p>Now, you need to enable web support so that Flutter can set up your app to run on the web:</p>\n<pre>$ flutter config --enable-web</pre>\n<p>Now, create a directory named url_launcher_example(let’s assume ~/url_launcher_example), and create a Flutter project in it:</p>\n<pre>$ mkdir “~/url_launcher_example”<br>$ cd “~/url_launcher_example”<br>$ flutter create .</pre>\n<p><strong>Use </strong><strong>package:url_launcher</strong></p>\n<p>Our example app will have just a button that launches google.com.</p>\n<p>First, update the pubspec so that you depend on package:url_launcher. In pubspec.yaml, under dependencies, add the line (highlighted in bold):</p>\n<pre>name: url_launcher_example<br> ...<br>dependencies:<br>  flutter:<br>    sdk: flutter<br><strong>url_launcher: 5.2.3</strong><br>  ...</pre>\n<p>Now, replace the entire contents of lib/main.dart with the following:</p>\n<a href=\"https://medium.com/media/288972317514c5b76509f5d340d79b94/href\">https://medium.com/media/288972317514c5b76509f5d340d79b94/href</a><p>Verify that the app works by running it on your Android or iOS device, or simulator by running the app normally with flutter run. The app should look like this screenshot. Try clicking the <strong>Launch</strong>! button and verify that it opens Google.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UTowUOvpkFW35rcuJ3Lf1w.png\"><figcaption>URL Launcher Example app</figcaption></figure><p>Now, you can run the same app on the web with flutter run -d chrome. The app should open and render just like the mobile version, but clicking <strong>Launch</strong>! does nothing. Let’s start writing the web plugin for url_launcher.</p>\n<h3>\n<strong>Creating </strong><strong>package:url_launcher_web</strong>\n</h3>\n<p>Create a new directory called url_launcher_web (let’s assume ~/url_launcher_web):</p>\n<pre>$ mkdir “~/url_launcher_web”<br>$ cd “~/url_launcher_web”</pre>\n<p>Unfortunately, there is no template for web plugins currently (that is, you can’t use flutter create), so you’ll have to create the plugin manually. But, before you start coding, some discussion is in order about how this is actually going to be implemented.</p>\n<p><strong>Looking into </strong><strong>package:url_launcher</strong></p>\n<p>Let’s take a look at how package:url_launcher is implemented, so you know what to do for package:url_launcher_web. The main code can be found <a href=\"https://github.com/flutter/plugins/blob/f04b3c8565ca9d2dac1f7f1ee8a44f41f97fe542/packages/url_launcher/url_launcher/lib/url_launcher.dart\">here</a>. These are the main bits you should care about:</p>\n<a href=\"https://medium.com/media/03c15edfdcd548e0fec0ba40c98db037/href\">https://medium.com/media/03c15edfdcd548e0fec0ba40c98db037/href</a><p>Almost all Flutter plugins are written like this. They create a MethodChannel, and then the plugin works by sending a method call on the channel to the “platform-side” (that is, Android or iOS) of the plugin. So, the way this plugin works on Android is that there is some code, written in Java, that registers a MethodChannel on the Android side. The MethodChannel waits for method calls, which call the required Android code to launch a URL. In order to get this plugin working on the web, you need to do the same thing as in the Android and iOS implementations, create a MethodChannel that waits for method calls, and when the MethodChannel receives them, launches the given URL.</p>\n<p><strong>Implementing </strong><strong>package:url_launcher_web</strong></p>\n<p>Web implementations of Flutter plugins are written as Dart packages. Let’s begin with the pubspec.yaml. Assuming you’re in your url_launcher_web directory you created earlier, create a file named pubspec.yaml, and paste the following code in the file:</p>\n<a href=\"https://medium.com/media/1d767c3a24e4ed2827f642698c6e1ae1/href\">https://medium.com/media/1d767c3a24e4ed2827f642698c6e1ae1/href</a><p>Some key things to note:</p>\n<ul>\n<li>The platforms: section contains a section for web: that declares the name of the class where you will implement the plugin, as well as the filename containing the class.</li>\n<li>The flutter_web_plugins dependency lets you register the web implementation of url_launcher.</li>\n</ul>\n<p>We declared that our implementation will be a class named UrlLauncherPlugin and be written in url_launcher_web.dart, so let’s write that class now. Make sure you create a lib/ directory first, then edit lib/url_launcher_web.dart, and paste the following code in the file:</p>\n<a href=\"https://medium.com/media/b2106dadcc15a869428141afde8cd330/href\">https://medium.com/media/b2106dadcc15a869428141afde8cd330/href</a><p>There are several key points to note in our implementation, let’s go over them one by one.</p>\n<p><strong>Registering the plugin with </strong><strong>registerWith</strong></p>\n<p>Just as on Android or iOS, web plugins need to do some initialization before the app runs. This is done in the static registerWith method, which takes a Registrar (which comes from package:flutter_web_plugins).</p>\n<p>In this case, we are registering a MethodChannel to listen for incoming messages from the app. Note how we initialize the MethodChannel with registrar.messenger. All MethodChannels have a BinaryMessenger that they use to send and receive messages. By default, a MethodChannel uses the default BinaryMessenger defined in Flutter. The BinaryMessenger sends messages from the app to the platform side, but we are writing a plugin that is on the platform side and should receive messages from the app, so we need to initialize the MethodChannel with a different BinaryMessenger. Luckily, the Registrar that is passed to the plugin in registerWith has a messenger that does the right thing. By initializing our MethodChannel with it, we now have a MethodChannel that receives method calls from the app.</p>\n<p><strong>Handling method calls</strong></p>\n<p>The MethodChannel we created registered handleMethodCall as its method call handler. This means that any time the app-side MethodChannel (the one created in package:url_launcher) sends a method call to the platform-side MethodChannel (the one we created in registerWith) this method call handler is invoked.</p>\n<p>If the handler receives a method call to the ‘launch’ method, then it invokes _launch, which simply opens a new window with the given URL.</p>\n<h3>Using the web plugin in the example app</h3>\n<p>Our web plugin is looking good! Now, we need to use it from the example app we created earlier.</p>\n<p>Modify the pubspec in ~/url_launcher_example to add a dependency to ~/url_launcher_web. Your change should look something like this. (Make sure to use the correct path for where you actually put your directories):</p>\n<pre>dependencies:<br>  flutter:<br>    sdk: flutter<br>  url_launcher: 5.2.3<br><strong>  url_launcher_web:<br>    path: ../url_launcher_web</strong></pre>\n<p>Now, run the example app again with flutter run -d chrome. Try clicking the <strong>Launch</strong>! button. It should open google.com in a new tab.</p>\n<p>Congratulations! You successfully added web support to a Flutter plugin!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5e26c689ea1\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">How to Write a Flutter Web Plugin</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h3>Introduction</h3>\n<p>Do you want to add support for a Flutter plugin? This article will show you how web support was added to the <a href=\"https://pub.dev/packages/url_launcher\">url_launcher</a> plugin. Before you read this article, you should already be familiar with plugin development and the concepts in <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin\">Developing plugin packages</a>.</p>\n<h3>Example: package:url_launcher</h3>\n<p>First, let’s create an example app that uses package:url_launcher, so you can verify that it works correctly.</p>\n<p><strong>Setup</strong></p>\n<p>In order to use web plugins, you need to be on the Flutter dev channel. Make sure that you’re on the dev channel by running:</p>\n<pre>$ flutter channel dev<br>$ flutter upgrade</pre>\n<p>Now, you need to enable web support so that Flutter can set up your app to run on the web:</p>\n<pre>$ flutter config --enable-web</pre>\n<p>Now, create a directory named url_launcher_example(let’s assume ~/url_launcher_example), and create a Flutter project in it:</p>\n<pre>$ mkdir “~/url_launcher_example”<br>$ cd “~/url_launcher_example”<br>$ flutter create .</pre>\n<p><strong>Use </strong><strong>package:url_launcher</strong></p>\n<p>Our example app will have just a button that launches google.com.</p>\n<p>First, update the pubspec so that you depend on package:url_launcher. In pubspec.yaml, under dependencies, add the line (highlighted in bold):</p>\n<pre>name: url_launcher_example<br> ...<br>dependencies:<br>  flutter:<br>    sdk: flutter<br><strong>url_launcher: 5.2.3</strong><br>  ...</pre>\n<p>Now, replace the entire contents of lib/main.dart with the following:</p>\n<a href=\"https://medium.com/media/288972317514c5b76509f5d340d79b94/href\">https://medium.com/media/288972317514c5b76509f5d340d79b94/href</a><p>Verify that the app works by running it on your Android or iOS device, or simulator by running the app normally with flutter run. The app should look like this screenshot. Try clicking the <strong>Launch</strong>! button and verify that it opens Google.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UTowUOvpkFW35rcuJ3Lf1w.png\"><figcaption>URL Launcher Example app</figcaption></figure><p>Now, you can run the same app on the web with flutter run -d chrome. The app should open and render just like the mobile version, but clicking <strong>Launch</strong>! does nothing. Let’s start writing the web plugin for url_launcher.</p>\n<h3>\n<strong>Creating </strong><strong>package:url_launcher_web</strong>\n</h3>\n<p>Create a new directory called url_launcher_web (let’s assume ~/url_launcher_web):</p>\n<pre>$ mkdir “~/url_launcher_web”<br>$ cd “~/url_launcher_web”</pre>\n<p>Unfortunately, there is no template for web plugins currently (that is, you can’t use flutter create), so you’ll have to create the plugin manually. But, before you start coding, some discussion is in order about how this is actually going to be implemented.</p>\n<p><strong>Looking into </strong><strong>package:url_launcher</strong></p>\n<p>Let’s take a look at how package:url_launcher is implemented, so you know what to do for package:url_launcher_web. The main code can be found <a href=\"https://github.com/flutter/plugins/blob/f04b3c8565ca9d2dac1f7f1ee8a44f41f97fe542/packages/url_launcher/url_launcher/lib/url_launcher.dart\">here</a>. These are the main bits you should care about:</p>\n<a href=\"https://medium.com/media/03c15edfdcd548e0fec0ba40c98db037/href\">https://medium.com/media/03c15edfdcd548e0fec0ba40c98db037/href</a><p>Almost all Flutter plugins are written like this. They create a MethodChannel, and then the plugin works by sending a method call on the channel to the “platform-side” (that is, Android or iOS) of the plugin. So, the way this plugin works on Android is that there is some code, written in Java, that registers a MethodChannel on the Android side. The MethodChannel waits for method calls, which call the required Android code to launch a URL. In order to get this plugin working on the web, you need to do the same thing as in the Android and iOS implementations, create a MethodChannel that waits for method calls, and when the MethodChannel receives them, launches the given URL.</p>\n<p><strong>Implementing </strong><strong>package:url_launcher_web</strong></p>\n<p>Web implementations of Flutter plugins are written as Dart packages. Let’s begin with the pubspec.yaml. Assuming you’re in your url_launcher_web directory you created earlier, create a file named pubspec.yaml, and paste the following code in the file:</p>\n<a href=\"https://medium.com/media/1d767c3a24e4ed2827f642698c6e1ae1/href\">https://medium.com/media/1d767c3a24e4ed2827f642698c6e1ae1/href</a><p>Some key things to note:</p>\n<ul>\n<li>The platforms: section contains a section for web: that declares the name of the class where you will implement the plugin, as well as the filename containing the class.</li>\n<li>The flutter_web_plugins dependency lets you register the web implementation of url_launcher.</li>\n</ul>\n<p>We declared that our implementation will be a class named UrlLauncherPlugin and be written in url_launcher_web.dart, so let’s write that class now. Make sure you create a lib/ directory first, then edit lib/url_launcher_web.dart, and paste the following code in the file:</p>\n<a href=\"https://medium.com/media/b2106dadcc15a869428141afde8cd330/href\">https://medium.com/media/b2106dadcc15a869428141afde8cd330/href</a><p>There are several key points to note in our implementation, let’s go over them one by one.</p>\n<p><strong>Registering the plugin with </strong><strong>registerWith</strong></p>\n<p>Just as on Android or iOS, web plugins need to do some initialization before the app runs. This is done in the static registerWith method, which takes a Registrar (which comes from package:flutter_web_plugins).</p>\n<p>In this case, we are registering a MethodChannel to listen for incoming messages from the app. Note how we initialize the MethodChannel with registrar.messenger. All MethodChannels have a BinaryMessenger that they use to send and receive messages. By default, a MethodChannel uses the default BinaryMessenger defined in Flutter. The BinaryMessenger sends messages from the app to the platform side, but we are writing a plugin that is on the platform side and should receive messages from the app, so we need to initialize the MethodChannel with a different BinaryMessenger. Luckily, the Registrar that is passed to the plugin in registerWith has a messenger that does the right thing. By initializing our MethodChannel with it, we now have a MethodChannel that receives method calls from the app.</p>\n<p><strong>Handling method calls</strong></p>\n<p>The MethodChannel we created registered handleMethodCall as its method call handler. This means that any time the app-side MethodChannel (the one created in package:url_launcher) sends a method call to the platform-side MethodChannel (the one we created in registerWith) this method call handler is invoked.</p>\n<p>If the handler receives a method call to the ‘launch’ method, then it invokes _launch, which simply opens a new window with the given URL.</p>\n<h3>Using the web plugin in the example app</h3>\n<p>Our web plugin is looking good! Now, we need to use it from the example app we created earlier.</p>\n<p>Modify the pubspec in ~/url_launcher_example to add a dependency to ~/url_launcher_web. Your change should look something like this. (Make sure to use the correct path for where you actually put your directories):</p>\n<pre>dependencies:<br>  flutter:<br>    sdk: flutter<br>  url_launcher: 5.2.3<br><strong>  url_launcher_web:<br>    path: ../url_launcher_web</strong></pre>\n<p>Now, run the example app again with flutter run -d chrome. Try clicking the <strong>Launch</strong>! button. It should open google.com in a new tab.</p>\n<p>Congratulations! You successfully added web support to a Flutter plugin!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5e26c689ea1\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">How to Write a Flutter Web Plugin</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "web-development",
                "flutter",
                "plugins"
            ]
        },
        {
            "title": "We hear you — learnings from Q3 2019 Flutter user survey",
            "pubDate": "2019-11-19 20:04:57",
            "link": "https://medium.com/flutter/we-hear-you-learnings-from-q3-2019-flutter-user-survey-af588dbd71b1?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/af588dbd71b1",
            "author": "JaYoung Lee",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*kC6Z0A82B9Yk4mV88fo9CQ.png",
            "description": "\n<h3>We hear you — learnings from Q3 2019 Flutter user survey</h3>\n<p><em>On performance, add-to-app, plugins, and more</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kC6Z0A82B9Yk4mV88fo9CQ.png\"></figure><p>Flutter’s User Experience team runs a survey every quarter to understand what we can do to help you be successful with Flutter. Over 7,500 users participated in the Q3 survey, and we’re here to share what we learned, <a href=\"https://medium.com/flutter/search?q=survey\">as always</a>.</p>\n<p>Overall, 92% of the users were either <em>somewhat satisfied </em>or <em>very satisfied</em> with Flutter. This is the first question we ask in every survey, because it is important for us to build a product that you love. We are excited to see the same level of satisfaction as <a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">last quarter</a>.</p>\n<h3><strong>Performance</strong></h3>\n<p>Flutter continues to polish its foundation, and that includes improving the experience around Flutter’s performance. To better understand how we’re doing on this topic, we covered the performance of Flutter as one of the main topics in this survey.</p>\n<p>While 78% of the users had experience with release or profile mode (performance should only be assessed in release or profile mode), 85% of them were positively satisfied (either <em>somewhat satisfied </em>or <em>very satisfied</em>) with Flutter’s performance. In addition, we asked about sub-categories of performance: rendering performance, memory performance, power usage performance, and binary size. We learned that 10% to 20% of users don’t know how to assess these aspects of performance, and the least satisfying aspect was the binary size (54% positively satisfied). For those who need more information about how to assess and optimize different aspects of performance, we will soon publish how-to guides, in addition to <a href=\"https://flutter.dev/docs/perf\">the existing documentation on performance</a>. The survey was an opportunity for us to understand that some performance metrics, such as power usage or memory performance, are harder to assess than others.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*UMfWbaBispXV0tMD\"><figcaption><em>10% to 20% of users don’t know how to assess these performances</em></figcaption></figure><p>We also learned that only about half of the users (47%) are using <a href=\"https://flutter.dev/docs/development/tools/devtools/overview\">Dart DevTools</a> to measure the performance of their Flutter app, which is a suite of performance tools for Dart and Flutter. Half of those who haven’t used Dart DevTools said that they didn’t know they exist (48%) and a fifth of them didn’t know how to use them (21%). We will put more effort on increasing the awareness of the DevTools. We will also more tightly integrate DevTools with the IDEs, making it easier to launch specific DevTools functionality, potentially without requiring opening a separate web browser.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jKeTRjxJ0q0gFu2H\"><figcaption><em>Performance profiling tool preference</em></figcaption></figure><h3><strong>Add-to-app</strong></h3>\n<p>Add-to-app is the incremental adoption of Flutter by adding a Flutter-rendered screen into an existing Android or iOS app, rather than creating a from-scratch Flutter-only project. This is a great way to adopt Flutter when there are constraints that prevent you from writing an app from scratch, and the team is investing into supporting such a journey.</p>\n<p>From the survey, we learned that 56% of respondents are interested in add-to-app, and 36% of them have already attempted implementing add-to-app in their existing apps, while 40% were not aware that it’s currently possible with Flutter. Experimental add-to-app instructions are described in the <a href=\"https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps\">wiki page</a>. Although many users wanted to try add-to-app rather than building a full Flutter app, 64% of the interested users said that they would attempt to transition to a full Flutter app in a year, instead of remaining in a hybrid app.</p>\n<p>The survey also helped the team identify future plans, such as which UI pattern to prioritize (i.e., full screen vs. partial screen), which tooling to improve first, and so on. It was also news to us that the lack of coverage in middleware (such as platform ⇄ Flutter interoperability) was the biggest challenge to those who tried add-to-app already, even more than the lack of capability/APIs or documentation. The team is working towards a better add-to-app experience. You can watch their progress in the <a href=\"https://github.com/flutter/flutter/projects/51\">Add to App 2019 GitHub project</a>.</p>\n<h3><strong>Plugins</strong></h3>\n<p>Ecosystem is another crucial part of Flutter; this enables developers to extend the capabilities of Flutter with packages and plugins when the core framework doesn’t support a particular feature. In the Q2 survey, we covered a number of <a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">ecosystem-related questions</a> to understand your pain points. In Q3, we added two open-ended questions to better understand which plugins (or lack of plugins) are impeding the development and release of your apps.</p>\n<p>16% of all respondents answered these questions, and we identified over 70 common themes. Some of the frequently-mentioned themes are listed below. The main takeaway for us is that the listed plugins already exist on pub.dev. This tells us that raising the quality of existing plugins should be one of the most important goals in the coming quarters.</p>\n<ol>\n<li>Geo (e.g., Google Maps)</li>\n<li>Media (e.g., audio/video player, audio/video recording)</li>\n<li>Webview</li>\n<li>Ads (e.g., Admob, native ads)</li>\n<li>Payment</li>\n<li>Data management</li>\n<li>Image support (e.g. Lottie, SVG)</li>\n<li>Camera</li>\n<li>Notifications</li>\n<li>Background services</li>\n</ol>\n<p>We will focus on improving your experience around Flutter’s ecosystem and also make it easier for you to find quality plugins. As a starting point, Dart has recently released a “<a href=\"https://medium.com/dartlang/verified-publishers-98f05466558a\">verified publishers</a>” feature for <a href=\"http://pub.dev/\">pub.dev</a> (on Dart’s 8th birthday!) to make it easy for users to identify trustworthy publishers. This was one of the planned improvements mentioned in the recap of the <a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">previous survey</a>. Please keep your eye out for further improvements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rHPbdMZoe86uwe1H\"><figcaption><em>First page of dart.dev features some verified Flutter packages</em></figcaption></figure><h3><strong>Frustrating experiences</strong></h3>\n<p>We also asked another open-ended question about recurring annoyances. Although <a href=\"https://github.com/flutter/flutter/issues\">GitHub issues</a> are open to anyone who wants to file, comment, or upvote, on this survey we wanted to capture frictions that users might not have reported on Github.</p>\n<p>We collected over 1,600 comments from this one question, and several team members dedicated many hours to reading and sorting them into categories. We were able to capture some minor but frequent failures that may potentially lead to annoyance and frustration, such as issues related to hot reload and debugging, issues with upgrades and migration, and so on. The sub-teams of Flutter were notified of issues relevant to their work, and it led to many productive discussions. For example, we are working on <a href=\"https://github.com/flutter/flutter/issues/42549\">better reporting</a> to understand hot reload issues. If you have recurring annoyances, do not hesitate to file an issue. We are tracking those with the “a: annoyance” <a href=\"https://github.com/flutter/flutter/labels/a%3A%20annoyance\">label</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*c_10W3HCaw0k6u_h\"><figcaption><em>Track the progress on Github</em></figcaption></figure><p>Thank you again for participating in the survey! Please continue to provide valuable feedback to the Flutter team and help us plan for the coming quarters. Flutter’s UX research team also performs a variety of user experience studies so that we can learn how to make your experience with Flutter more pleasant. If you are interested in participating, please <a href=\"http://flutter.dev/research-signup\">sign up</a> for future studies.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=af588dbd71b1\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/we-hear-you-learnings-from-q3-2019-flutter-user-survey-af588dbd71b1\">We hear you — learnings from Q3 2019 Flutter user survey</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h3>We hear you — learnings from Q3 2019 Flutter user survey</h3>\n<p><em>On performance, add-to-app, plugins, and more</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kC6Z0A82B9Yk4mV88fo9CQ.png\"></figure><p>Flutter’s User Experience team runs a survey every quarter to understand what we can do to help you be successful with Flutter. Over 7,500 users participated in the Q3 survey, and we’re here to share what we learned, <a href=\"https://medium.com/flutter/search?q=survey\">as always</a>.</p>\n<p>Overall, 92% of the users were either <em>somewhat satisfied </em>or <em>very satisfied</em> with Flutter. This is the first question we ask in every survey, because it is important for us to build a product that you love. We are excited to see the same level of satisfaction as <a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">last quarter</a>.</p>\n<h3><strong>Performance</strong></h3>\n<p>Flutter continues to polish its foundation, and that includes improving the experience around Flutter’s performance. To better understand how we’re doing on this topic, we covered the performance of Flutter as one of the main topics in this survey.</p>\n<p>While 78% of the users had experience with release or profile mode (performance should only be assessed in release or profile mode), 85% of them were positively satisfied (either <em>somewhat satisfied </em>or <em>very satisfied</em>) with Flutter’s performance. In addition, we asked about sub-categories of performance: rendering performance, memory performance, power usage performance, and binary size. We learned that 10% to 20% of users don’t know how to assess these aspects of performance, and the least satisfying aspect was the binary size (54% positively satisfied). For those who need more information about how to assess and optimize different aspects of performance, we will soon publish how-to guides, in addition to <a href=\"https://flutter.dev/docs/perf\">the existing documentation on performance</a>. The survey was an opportunity for us to understand that some performance metrics, such as power usage or memory performance, are harder to assess than others.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*UMfWbaBispXV0tMD\"><figcaption><em>10% to 20% of users don’t know how to assess these performances</em></figcaption></figure><p>We also learned that only about half of the users (47%) are using <a href=\"https://flutter.dev/docs/development/tools/devtools/overview\">Dart DevTools</a> to measure the performance of their Flutter app, which is a suite of performance tools for Dart and Flutter. Half of those who haven’t used Dart DevTools said that they didn’t know they exist (48%) and a fifth of them didn’t know how to use them (21%). We will put more effort on increasing the awareness of the DevTools. We will also more tightly integrate DevTools with the IDEs, making it easier to launch specific DevTools functionality, potentially without requiring opening a separate web browser.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jKeTRjxJ0q0gFu2H\"><figcaption><em>Performance profiling tool preference</em></figcaption></figure><h3><strong>Add-to-app</strong></h3>\n<p>Add-to-app is the incremental adoption of Flutter by adding a Flutter-rendered screen into an existing Android or iOS app, rather than creating a from-scratch Flutter-only project. This is a great way to adopt Flutter when there are constraints that prevent you from writing an app from scratch, and the team is investing into supporting such a journey.</p>\n<p>From the survey, we learned that 56% of respondents are interested in add-to-app, and 36% of them have already attempted implementing add-to-app in their existing apps, while 40% were not aware that it’s currently possible with Flutter. Experimental add-to-app instructions are described in the <a href=\"https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps\">wiki page</a>. Although many users wanted to try add-to-app rather than building a full Flutter app, 64% of the interested users said that they would attempt to transition to a full Flutter app in a year, instead of remaining in a hybrid app.</p>\n<p>The survey also helped the team identify future plans, such as which UI pattern to prioritize (i.e., full screen vs. partial screen), which tooling to improve first, and so on. It was also news to us that the lack of coverage in middleware (such as platform ⇄ Flutter interoperability) was the biggest challenge to those who tried add-to-app already, even more than the lack of capability/APIs or documentation. The team is working towards a better add-to-app experience. You can watch their progress in the <a href=\"https://github.com/flutter/flutter/projects/51\">Add to App 2019 GitHub project</a>.</p>\n<h3><strong>Plugins</strong></h3>\n<p>Ecosystem is another crucial part of Flutter; this enables developers to extend the capabilities of Flutter with packages and plugins when the core framework doesn’t support a particular feature. In the Q2 survey, we covered a number of <a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">ecosystem-related questions</a> to understand your pain points. In Q3, we added two open-ended questions to better understand which plugins (or lack of plugins) are impeding the development and release of your apps.</p>\n<p>16% of all respondents answered these questions, and we identified over 70 common themes. Some of the frequently-mentioned themes are listed below. The main takeaway for us is that the listed plugins already exist on pub.dev. This tells us that raising the quality of existing plugins should be one of the most important goals in the coming quarters.</p>\n<ol>\n<li>Geo (e.g., Google Maps)</li>\n<li>Media (e.g., audio/video player, audio/video recording)</li>\n<li>Webview</li>\n<li>Ads (e.g., Admob, native ads)</li>\n<li>Payment</li>\n<li>Data management</li>\n<li>Image support (e.g. Lottie, SVG)</li>\n<li>Camera</li>\n<li>Notifications</li>\n<li>Background services</li>\n</ol>\n<p>We will focus on improving your experience around Flutter’s ecosystem and also make it easier for you to find quality plugins. As a starting point, Dart has recently released a “<a href=\"https://medium.com/dartlang/verified-publishers-98f05466558a\">verified publishers</a>” feature for <a href=\"http://pub.dev/\">pub.dev</a> (on Dart’s 8th birthday!) to make it easy for users to identify trustworthy publishers. This was one of the planned improvements mentioned in the recap of the <a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">previous survey</a>. Please keep your eye out for further improvements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rHPbdMZoe86uwe1H\"><figcaption><em>First page of dart.dev features some verified Flutter packages</em></figcaption></figure><h3><strong>Frustrating experiences</strong></h3>\n<p>We also asked another open-ended question about recurring annoyances. Although <a href=\"https://github.com/flutter/flutter/issues\">GitHub issues</a> are open to anyone who wants to file, comment, or upvote, on this survey we wanted to capture frictions that users might not have reported on Github.</p>\n<p>We collected over 1,600 comments from this one question, and several team members dedicated many hours to reading and sorting them into categories. We were able to capture some minor but frequent failures that may potentially lead to annoyance and frustration, such as issues related to hot reload and debugging, issues with upgrades and migration, and so on. The sub-teams of Flutter were notified of issues relevant to their work, and it led to many productive discussions. For example, we are working on <a href=\"https://github.com/flutter/flutter/issues/42549\">better reporting</a> to understand hot reload issues. If you have recurring annoyances, do not hesitate to file an issue. We are tracking those with the “a: annoyance” <a href=\"https://github.com/flutter/flutter/labels/a%3A%20annoyance\">label</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*c_10W3HCaw0k6u_h\"><figcaption><em>Track the progress on Github</em></figcaption></figure><p>Thank you again for participating in the survey! Please continue to provide valuable feedback to the Flutter team and help us plan for the coming quarters. Flutter’s UX research team also performs a variety of user experience studies so that we can learn how to make your experience with Flutter more pleasant. If you are interested in participating, please <a href=\"http://flutter.dev/research-signup\">sign up</a> for future studies.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=af588dbd71b1\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/we-hear-you-learnings-from-q3-2019-flutter-user-survey-af588dbd71b1\">We hear you — learnings from Q3 2019 Flutter user survey</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "mobile-development",
                "user-experience",
                "developer-experience",
                "flutter",
                "surveys"
            ]
        },
        {
            "title": "Time is Ticking: Clock Contest live with over $10,000 in prizes",
            "pubDate": "2019-11-18 16:49:26",
            "link": "https://medium.com/flutter/time-is-ticking-clock-contest-live-with-over-10-000-in-prizes-3b960626d6bd?source=rss----4da7dfd21a33---4",
            "guid": "https://medium.com/p/3b960626d6bd",
            "author": "Martin Aguinis",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*uDHQJzyDKsFEz4X59pi5Uw.png",
            "description": "\n<p><a href=\"http://flutter.dev/clock\">Flutter Clock</a> is a contest offered by Google, with participation from the Flutter, Google Assistant, and Lenovo teams, that challenges you to build a Flutter clock face application for the Lenovo Smart Clock that is beautiful and innovative. Whether you’re a Flutter expert or novice, we invite you to join us and see what you can create. Over $10,000 in prizes will be awarded to the winners! Visit <a href=\"http://flutter.dev/clock\">flutter.dev/clock</a> to enter.</p>\n<a href=\"https://medium.com/media/5ce206052827ed9c9082511869c150d1/href\">https://medium.com/media/5ce206052827ed9c9082511869c150d1/href</a><p><strong>High Level Details</strong></p>\n<p><strong><em>Date: </em></strong><em>All entries must be submitted by January 20, 2020 11:59 PM PST (GMT-8).</em></p>\n<p><strong><em>How to Submit:</em></strong><em> Entries will be collected on the form linked at </em><a href=\"http://flutter.dev/clock\"><em>flutter.dev/clock</em></a><em>, but see the </em><a href=\"https://docs.google.com/document/d/1ybyQCK8Sy7vrD9wuc6pbgwVkyrVZ7Rd_41r5NXGqlt8/edit\"><em>Official Rules</em></a><em> for full details.</em></p>\n<p><strong><em>Winners:</em></strong><em> Submissions will be rated by Google and Flutter expert judges against the following rubric: visual beauty, code quality, novelty of idea, and overall execution.</em></p>\n<p><strong><em>Prizes</em></strong><em>: Potential prizes include a fully loaded iMac Pro, Lenovo Smart Display, and Lenovo Smart Clock. Also, all complete and valid submissions will receive a digital certificate of completion. In addition, some of the clock contest submissions might be integrated into the Lenovo Smart Clock’s lineup of clock faces, or used as inspiration for future clock faces!</em></p>\n<p><em>Results will be announced at our Mobile World Congress 2020 Keynote.</em></p>\n<p>Good luck and have fun! Time is ticking…</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*uDHQJzyDKsFEz4X59pi5Uw.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3b960626d6bd\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/time-is-ticking-clock-contest-live-with-over-10-000-in-prizes-3b960626d6bd\">Time is Ticking: Clock Contest live with over $10,000 in prizes</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p><a href=\"http://flutter.dev/clock\">Flutter Clock</a> is a contest offered by Google, with participation from the Flutter, Google Assistant, and Lenovo teams, that challenges you to build a Flutter clock face application for the Lenovo Smart Clock that is beautiful and innovative. Whether you’re a Flutter expert or novice, we invite you to join us and see what you can create. Over $10,000 in prizes will be awarded to the winners! Visit <a href=\"http://flutter.dev/clock\">flutter.dev/clock</a> to enter.</p>\n<a href=\"https://medium.com/media/5ce206052827ed9c9082511869c150d1/href\">https://medium.com/media/5ce206052827ed9c9082511869c150d1/href</a><p><strong>High Level Details</strong></p>\n<p><strong><em>Date: </em></strong><em>All entries must be submitted by January 20, 2020 11:59 PM PST (GMT-8).</em></p>\n<p><strong><em>How to Submit:</em></strong><em> Entries will be collected on the form linked at </em><a href=\"http://flutter.dev/clock\"><em>flutter.dev/clock</em></a><em>, but see the </em><a href=\"https://docs.google.com/document/d/1ybyQCK8Sy7vrD9wuc6pbgwVkyrVZ7Rd_41r5NXGqlt8/edit\"><em>Official Rules</em></a><em> for full details.</em></p>\n<p><strong><em>Winners:</em></strong><em> Submissions will be rated by Google and Flutter expert judges against the following rubric: visual beauty, code quality, novelty of idea, and overall execution.</em></p>\n<p><strong><em>Prizes</em></strong><em>: Potential prizes include a fully loaded iMac Pro, Lenovo Smart Display, and Lenovo Smart Clock. Also, all complete and valid submissions will receive a digital certificate of completion. In addition, some of the clock contest submissions might be integrated into the Lenovo Smart Clock’s lineup of clock faces, or used as inspiration for future clock faces!</em></p>\n<p><em>Results will be announced at our Mobile World Congress 2020 Keynote.</em></p>\n<p>Good luck and have fun! Time is ticking…</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*uDHQJzyDKsFEz4X59pi5Uw.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3b960626d6bd\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/flutter/time-is-ticking-clock-contest-live-with-over-10-000-in-prizes-3b960626d6bd\">Time is Ticking: Clock Contest live with over $10,000 in prizes</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "clock",
                "challenge",
                "flutter",
                "developer",
                "contests"
            ]
        }
    ]
}